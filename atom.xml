<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Developer 009</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://fsworld009.github.io/blog/"/>
  <updated>2020-06-25T16:02:48.061Z</updated>
  <id>https://fsworld009.github.io/blog/</id>
  
  <author>
    <name>WorldFS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Version manage all the things</title>
    <link href="https://fsworld009.github.io/blog/2019/07/29/version-manage-all-the-things/"/>
    <id>https://fsworld009.github.io/blog/2019/07/29/version-manage-all-the-things/</id>
    <published>2019-07-29T14:37:41.000Z</published>
    <updated>2020-06-25T16:02:48.061Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I’ve re-installed Nodejs, python, and Ruby on my work machine.<br>When installing Ruby via Homebrew I was having trouble using it after<br>installation, then my collegue figured out that <code>brew info ruby</code> outputs<br>this message:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">By default, binaries installed <span class="keyword">by</span> gem will be placed <span class="keyword">into</span>:</div><div class="line">  /usr/<span class="keyword">local</span>/lib/ruby/gems/<span class="number">2.6</span><span class="number">.0</span>/bin</div><div class="line"></div><div class="line">You may want <span class="keyword">to</span> add this <span class="keyword">to</span> your PATH.</div><div class="line"></div><div class="line">ruby <span class="keyword">is</span> keg-only, which means <span class="keyword">it</span> was <span class="keyword">not</span> symlinked <span class="keyword">into</span> /usr/<span class="keyword">local</span>,</div><div class="line">because macOS already provides this software <span class="keyword">and</span> installing another <span class="built_in">version</span> <span class="keyword">in</span></div><div class="line">parallel can cause all kinds <span class="keyword">of</span> trouble.</div><div class="line"></div><div class="line">If you need <span class="keyword">to</span> have ruby <span class="keyword">first</span> <span class="keyword">in</span> your PATH <span class="built_in">run</span>:</div><div class="line">  echo 'export PATH=<span class="string">"/usr/local/opt/ruby/bin:$PATH"</span>' &gt;&gt; ~/.zshrc</div><div class="line"></div><div class="line">For compilers <span class="keyword">to</span> find ruby you may need <span class="keyword">to</span> <span class="keyword">set</span>:</div><div class="line">  export LDFLAGS=<span class="string">"-L/usr/local/opt/ruby/lib"</span></div><div class="line">  export CPPFLAGS=<span class="string">"-I/usr/local/opt/ruby/include"</span></div></pre></td></tr></table></figure><p>At this point I think it’s probably just better avoid installing Ruby via<br>homebrew. I searched a bit and decided to go with version managers like nvm.</p><p>This article is a quick note on what I ended up using for each language<br>and how did I installed them.</p><a id="more"></a><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><p>rbenv <a href="https://github.com/rbenv/rbenv.git" target="_blank" rel="noopener">https://github.com/rbenv/rbenv.git</a></p><ul><li>I prefer installation with git <a href="https://github.com/rbenv/rbenv#basic-github-checkout" target="_blank" rel="noopener">https://github.com/rbenv/rbenv#basic-github-checkout</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/rbenv/rbenv.git ~/.rbenv</div><div class="line"><span class="comment"># use a stable release instead of master</span></div><div class="line">$ <span class="built_in">cd</span> ~/.rbenv</div><div class="line">$ git checkout &#123;version_tag&#125;</div><div class="line"></div><div class="line"><span class="comment"># install ruby-build which is required for installing anything</span></div><div class="line">$ mkdir -p <span class="string">"<span class="variable">$(rbenv root)</span>"</span>/plugins</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/rbenv/ruby-build.git <span class="string">"<span class="variable">$(rbenv root)</span>"</span>/plugins/ruby-build</div><div class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(rbenv root)</span>"</span>/plugins/ruby-build</div><div class="line"><span class="comment"># use a stable release instead of master</span></div><div class="line">$ git checkout &#123;version_tag&#125;</div><div class="line"></div><div class="line"><span class="comment"># update .bashrc, or manually edit your ~/.bashrc, ~/.bash_profile</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'export PATH="$HOME/.rbenv/bin:$PATH"'</span> &gt;&gt; ~/.bash_profile</div><div class="line"></div><div class="line"><span class="comment"># install ruby and gem</span></div><div class="line">rbenv install 2.6.3</div><div class="line"><span class="comment"># use this version globally</span></div><div class="line">rbenv global 2.6.3</div><div class="line"><span class="comment"># install desired gem packages</span></div><div class="line">gem install sass</div><div class="line">gem install compass</div></pre></td></tr></table></figure><p>I’d like to make my <code>.bashrc</code> more portable so I added some<br>checks to see if rbenv is installed before executing <code>rbenv init</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># http://stackoverflow.com/questions/592620/check-if-a-program-exists-from-a-bash-script/3931779#3931779</span></div><div class="line"><span class="function"><span class="title">command_exists</span></span> () &#123;</div><div class="line">    <span class="built_in">type</span> <span class="string">"<span class="variable">$1</span>"</span> &amp;&gt; /dev/null ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$HOME</span>/.rbenv/"</span> ]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.rbenv/bin:<span class="variable">$PATH</span>"</span></div><div class="line">  <span class="keyword">if</span> command_exists rbenv; <span class="keyword">then</span></div><div class="line">    <span class="built_in">eval</span> <span class="string">"<span class="variable">$(rbenv init -)</span>"</span></div><div class="line">  <span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>pyenv <a href="https://github.com/pyenv/pyenv" target="_blank" rel="noopener">https://github.com/pyenv/pyenv</a></p><ul><li>I prefer installation with git <a href="https://github.com/pyenv/pyenv#basic-github-checkout" target="_blank" rel="noopener">https://github.com/pyenv/pyenv#basic-github-checkout</a></li></ul><p>The step is pretty much similar to rbenv in general<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/pyenv/pyenv.git ~/.pyenv</div><div class="line"><span class="comment"># use a stable release instead of master</span></div><div class="line">$ <span class="built_in">cd</span> ~/.pyenv</div><div class="line">$ git checkout &#123;version_tag&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># update .bashrc, or manually edit your ~/.bashrc, ~/.bash_profile</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'export PYENV_ROOT="$HOME/.pyenv"'</span> &gt;&gt; ~/.bash_profile</div><div class="line"><span class="built_in">echo</span> <span class="string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> &gt;&gt; ~/.bash_profile</div><div class="line"></div><div class="line"><span class="comment"># install ruby and gem</span></div><div class="line">pyenv install 3.7.3</div><div class="line"><span class="comment"># use this version globally</span></div><div class="line">pyenv global 3.7.3</div><div class="line"><span class="comment"># install desired pip packages</span></div><div class="line">pip install pipenv</div></pre></td></tr></table></figure></p><p>Similarly, I also added some checks before doing <code>pyenv init</code>, so that<br>it won’t break if I’m in an environment without pyenv:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$HOME</span>/.pyenv/"</span> ]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">export</span> PYENV_ROOT=<span class="string">"<span class="variable">$HOME</span>/.pyenv"</span></div><div class="line">  <span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PYENV_ROOT</span>/bin:<span class="variable">$PATH</span>"</span></div><div class="line">  <span class="keyword">if</span> command_exists pyenv; <span class="keyword">then</span></div><div class="line">    <span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></div><div class="line">  <span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>nvm <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">https://github.com/nvm-sh/nvm</a></p><ul><li>I prefer installation with git <a href="https://github.com/nvm-sh/nvm#git-install" target="_blank" rel="noopener">https://github.com/nvm-sh/nvm#git-install</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/nvm-sh/nvm.git ~/.nvm</div><div class="line"><span class="comment"># use a stable release instead of master</span></div><div class="line">$ <span class="built_in">cd</span> ~/.nvm</div><div class="line">$ git checkout &#123;version_tag&#125;</div><div class="line"></div><div class="line"><span class="comment"># update .bashrc, or manually edit your ~/.bashrc, ~/.bash_profile</span></div><div class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></div><div class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></div><div class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></div><div class="line"></div><div class="line"><span class="comment"># install latest nodejs v10 stable</span></div><div class="line">$ nvm install 10</div><div class="line">$ nvm use 10</div><div class="line"><span class="comment"># set default version to v10</span></div><div class="line">$ nvm <span class="built_in">alias</span> default 10</div><div class="line"></div><div class="line"><span class="comment"># install npm packages</span></div><div class="line">$ npm install</div></pre></td></tr></table></figure><p>Again, making <code>.bashrc</code> more general by checking file existence beforehand:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></div><div class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></div><div class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span></div></pre></td></tr></table></figure></p><ul><li>Note: to use nvm in fish shell, install <a href="https://github.com/jorgebucaran/fisher" target="_blank" rel="noopener">fisher</a><br>and do <code>fisher add FabioAntunes/fish-nvm</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I’ve re-installed Nodejs, python, and Ruby on my work machine.&lt;br&gt;When installing Ruby via Homebrew I was having trouble using it after&lt;br&gt;installation, then my collegue figured out that &lt;code&gt;brew info ruby&lt;/code&gt; outputs&lt;br&gt;this message:&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;By default, binaries installed &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; gem will be placed &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  /usr/&lt;span class=&quot;keyword&quot;&gt;local&lt;/span&gt;/lib/ruby/gems/&lt;span class=&quot;number&quot;&gt;2.6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;/bin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;You may want &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; add this &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; your PATH.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ruby &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; keg-only, which means &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; was &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; symlinked &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; /usr/&lt;span class=&quot;keyword&quot;&gt;local&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;because macOS already provides this software &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; installing another &lt;span class=&quot;built_in&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;parallel can cause all kinds &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; trouble.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;If you need &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; have ruby &lt;span class=&quot;keyword&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; your PATH &lt;span class=&quot;built_in&quot;&gt;run&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  echo &#39;export PATH=&lt;span class=&quot;string&quot;&gt;&quot;/usr/local/opt/ruby/bin:$PATH&quot;&lt;/span&gt;&#39; &amp;gt;&amp;gt; ~/.zshrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;For compilers &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; find ruby you may need &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  export LDFLAGS=&lt;span class=&quot;string&quot;&gt;&quot;-L/usr/local/opt/ruby/lib&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  export CPPFLAGS=&lt;span class=&quot;string&quot;&gt;&quot;-I/usr/local/opt/ruby/include&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;At this point I think it’s probably just better avoid installing Ruby via&lt;br&gt;homebrew. I searched a bit and decided to go with version managers like nvm.&lt;/p&gt;
&lt;p&gt;This article is a quick note on what I ended up using for each language&lt;br&gt;and how did I installed them.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nodejs" scheme="https://fsworld009.github.io/blog/tags/Nodejs/"/>
    
      <category term="Ruby" scheme="https://fsworld009.github.io/blog/tags/Ruby/"/>
    
      <category term="python" scheme="https://fsworld009.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Install Ubuntu instance in WSL</title>
    <link href="https://fsworld009.github.io/blog/2019/01/20/wsl-ubuntu/"/>
    <id>https://fsworld009.github.io/blog/2019/01/20/wsl-ubuntu/</id>
    <published>2019-01-20T14:44:05.000Z</published>
    <updated>2020-06-26T06:48:13.720Z</updated>
    
    <content type="html"><![CDATA[<p>There is already one when you enable WSL, but I’d like to install it on<br>different drives, and not need to worry about messing it up, so I discovered<br>a WSL Management tool <a href="https://github.com/DDoSolitary/LxRunOffline" target="_blank" rel="noopener">LxRunOffline</a></p><a id="more"></a><p>(Updated 2020/06/26: Found a note I wrote back in Sep 2019 when I was trying<br>to install WSL in a new laptop, so added a troubleshoot section below. Also<br>added a section for upgrading to WSL2)</p><h2 id="Download-and-install"><a href="#Download-and-install" class="headerlink" title="Download and install"></a>Download and install</h2><ol><li><p>follow the quick start <a href="https://github.com/DDoSolitary/LxRunOffline/wiki" target="_blank" rel="noopener">here</a><br>to download the Ubuntu for MS image, then install it with </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LxRunOffline i -n Ubuntu -d F:\WSL\Ubuntu -f &lt;path_to_ubuntu_image&gt; -s</div></pre></td></tr></table></figure></li><li><p>To start ubuntu, run</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LxRunOffline run bash -n Ubuntu</div></pre></td></tr></table></figure><p>Or you can create a shortcut as well</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">LxRunOffline</span> <span class="selector-tag">s</span> <span class="selector-tag">-n</span> <span class="selector-tag">Ubuntu</span> <span class="selector-tag">-f</span> <span class="selector-tag">F</span>:\<span class="selector-tag">Ubuntu</span><span class="selector-class">.lnk</span></div></pre></td></tr></table></figure><p>Or use <code>wsl</code> command</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">wsl -d Ubuntu</span></div></pre></td></tr></table></figure><p>You can also set default wsl version so that you only need to type <code>wsl</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wsl --<span class="built_in">set</span>-default Ubuntu</div><div class="line">wsl</div></pre></td></tr></table></figure><p>You should be login as root</p></li><li><p>Create User, similar to what we do in Arch Linux install, we need to create<br>a user with ability to sudo without password</p><ol><li><p>run <code>visudo</code> and add a new user group</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%wheel <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) NOPASSWD: <span class="keyword">ALL</span></div></pre></td></tr></table></figure></li><li><p>create user: <code>useradd -m -G wheel -s /bin/bash user1</code></p></li></ol></li><li><p>run <code>id user1</code> to get UID, and run <code>LxRunOffline su &lt;number&gt; -n Ubuntu</code>,<br>so next time you will be login as user1 on launch.</p></li><li><p>configure <a href="https://docs.microsoft.com/en-us/windows/desktop/api/wslapi/ne-wslapi-wsl_distribution_flags" target="_blank" rel="noopener">WSL_DISTRIBUTION_FLAGS</a>,<br>I set to 5 so that it won’t append %PATH% from Windows</p><ul><li><code>LxRunOffline se 5 -n Ubuntu</code></li></ul></li></ol><h2 id="Package-Manager"><a href="#Package-Manager" class="headerlink" title="Package Manager"></a>Package Manager</h2><p>This time I’d like to try <a href="http://linuxbrew.sh/" target="_blank" rel="noopener">Linuxbrew</a><br>for installing packages for developer works (like nodejs).<br>For system packages I’ll try to stick with <code>apt</code>. This way it should be<br>safer to do upgrades for my work environment.</p><p>I chose Linuxbrew mainly because my current work laptop is Mac, so it is more<br>consistent for me to switch between work laptop and my Windows PC.</p><p>The other reason is that apt prefers stable over latest version, so it might be<br>difficult to get what I need for work.</p><ol><li><p>Following their guide to do<br><code>sudo sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh&quot;</code>,<br>I get “Don’t run this as Root!” error, but without <code>sudo</code> it won’t<br>have permission to create or write to <code>/home/linuxbrew/</code> when not using root.</p></li><li><p>Solution: create that folder beforehand and set owner to <code>user1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /home/</div><div class="line">sudo mkdir linuxbrew</div><div class="line">sudo chown -R user1 linuxbrew/</div></pre></td></tr></table></figure><p>Then you should be able to run the script without <code>sudo</code></p></li><li><p>The output message contains suggestion on following installation steps:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- Install the Linuxbrew dependencies if you have sudo access:</div><div class="line">  Debian, Ubuntu, etc.</div><div class="line">    sudo apt-get install build-essential</div><div class="line">  Fedora, Red Hat, CentOS, etc.</div><div class="line">    sudo yum groupinstall &apos;Development Tools&apos;</div><div class="line">  See http://linuxbrew.sh/#dependencies for more information.</div><div class="line">- Add Linuxbrew to your ~/.profile by running</div><div class="line">    echo &apos;eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)&apos; &gt;&gt;~/.profile</div><div class="line">- Add Linuxbrew to your PATH</div><div class="line">    PATH=&quot;/home/linuxbrew/.linuxbrew/bin:$PATH&quot;</div><div class="line">- We recommend that you install GCC by running:</div><div class="line">    brew install gcc</div><div class="line">- After modifying your shell profile, you may need to restart your session</div><div class="line">  (logout and then log back in) if the brew command isn&apos;t found.</div><div class="line">- Run `brew help` to get started</div><div class="line">- Further documentation:</div><div class="line">    https://docs.brew.sh</div><div class="line">Warning: /home/linuxbrew/.linuxbrew/bin is not in your PATH.</div></pre></td></tr></table></figure><p>So we do</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install build-essential</div><div class="line"></div><div class="line"><span class="comment"># This one is optional, can also edit $PATH from wsl, see step 4</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)'</span> &gt;&gt;~/.profile</div><div class="line"></div><div class="line">brew install gcc</div></pre></td></tr></table></figure></li><li><p>(Only required if you skipped echo ‘eval… command above)<br>Prepend <code>/home/linuxbrew/.linuxbrew/bin</code> into <code>$PATH</code>:</p><ul><li>LxRunOffline has option to set default environment variables but I’m not<br>sure how to edit multiple lines.</li><li>So I open <code>regedit</code> and go to<br><code>Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Lxss\&lt;Distro ID&gt;</code><br>and edit <code>DefaultEnvironment</code> to<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HOSTTYPE=x86_64</div><div class="line">LANG=en_US.UTF-<span class="number">8</span></div><div class="line">PATH=<span class="regexp">/home/linuxbrew</span><span class="regexp">/.linuxbrew/bin</span><span class="symbol">:/usr/local/sbin</span><span class="symbol">:/usr/local/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/bin</span><span class="symbol">:/sbin</span><span class="symbol">:/bin</span><span class="symbol">:/usr/games</span><span class="symbol">:/usr/local/games</span></div><div class="line">TERM=xterm-<span class="number">256</span>color</div></pre></td></tr></table></figure></li></ul></li><li><p>now you should be able to install packages, like <code>brew install git</code></p></li></ol><h2 id="Set-timezone"><a href="#Set-timezone" class="headerlink" title="Set timezone"></a>Set timezone</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install tzdata</div></pre></td></tr></table></figure><p>Then follow the instruction to set timezone</p><p>To update timezone:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime</div></pre></td></tr></table></figure><h2 id="Backup-instance-configs"><a href="#Backup-instance-configs" class="headerlink" title="Backup instance configs"></a>Backup instance configs</h2><ol><li><p>export registry at<br><code>Computer\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Lxss\&lt;Distro ID&gt;</code>,<br>you could check <code>DistributionName</code> and find out which one is the correct ID.</p></li><li><p>LxRunOffline has export config option, but I haven’t tried importing it back<br>yet: <code>LxRunOffline ec -n Ubunto -f Ubuntu.xml</code></p></li></ol><h2 id="Probably-don’t-need-to-bother-with-running-GUI-app-anymore"><a href="#Probably-don’t-need-to-bother-with-running-GUI-app-anymore" class="headerlink" title="Probably don’t need to bother with running GUI app anymore"></a>Probably don’t need to bother with running GUI app anymore</h2><p><a href="https://github.com/Microsoft/console/issues/136#issuecomment-433151087" target="_blank" rel="noopener">The color issue on WSL console is resolved in October update (1809)</a> and <a href="https://github.com/Microsoft/vscode/issues/45693#issuecomment-449495252" target="_blank" rel="noopener">ConPTY support is available on VS Code insiders build</a>,<br>the best workflow on Windows (for me at least) now is use VS Code on Windows,<br>and launch Ubuntu terminals inside VS Code Terminal emulator.</p><p>Just change your settings.json to the following:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"terminal.integrated.shell.windows"</span>: <span class="string">"F:\\wsl\\LxRunOffline\\LxRunOffline.exe"</span>,</div><div class="line">  <span class="attr">"terminal.integrated.shellArgs.windows"</span>: [<span class="string">"run"</span>, <span class="string">"bash"</span>, <span class="string">"-n"</span>, <span class="string">"Ubuntu"</span>],</div><div class="line">  <span class="attr">"terminal.integrated.windowsEnableConpty"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Previously with Winpty, red bg will be rendered as yellow, and a lot of<br>black text get rendered as white, as below:</p><p><img src="../../../../images/vscode_wsl_terminal_winpty.png" alt="Terminal with Winpty"></p><p>Now with Conpty:</p><p><img src="../../../../images/vscode_wsl_terminal_conpty.png" alt="Terminal with Conpty"></p><p>Not too bad right? The font rendering is much better with Conpty as well.</p><h2 id="Troubleshoot"><a href="#Troubleshoot" class="headerlink" title="Troubleshoot"></a>Troubleshoot</h2><h3 id="visudo-command-not-found"><a href="#visudo-command-not-found" class="headerlink" title="visudo command not found"></a>visudo command not found</h3><p><a href="https://askubuntu.com/questions/1103038/cant-run-visudo-within-docker-sudoers-file-does-not-exist" target="_blank" rel="noopener">https://askubuntu.com/questions/1103038/cant-run-visudo-within-docker-sudoers-file-does-not-exist</a></p><h3 id="visudo-no-editor-found-editor-path-usr-bin-editor"><a href="#visudo-no-editor-found-editor-path-usr-bin-editor" class="headerlink" title="visudo: no editor found (editor path = /usr/bin/editor)"></a>visudo: no editor found (editor path = /usr/bin/editor)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt install vim</div></pre></td></tr></table></figure><h3 id="useradd-group-‘wheel’-does-not-exist"><a href="#useradd-group-‘wheel’-does-not-exist" class="headerlink" title="useradd: group ‘wheel’ does not exist"></a>useradd: group ‘wheel’ does not exist</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">addgroup wheel</div></pre></td></tr></table></figure><h3 id="home-linuxbrew-linuxbrew-Homebrew-Library-Homebrew-brew-sh-line-4-warning-setlocale-LC-ALL-cannot-change-locale-en-US-UTF-8-No-such-file-or-directory"><a href="#home-linuxbrew-linuxbrew-Homebrew-Library-Homebrew-brew-sh-line-4-warning-setlocale-LC-ALL-cannot-change-locale-en-US-UTF-8-No-such-file-or-directory" class="headerlink" title="/home/linuxbrew/.linuxbrew/Homebrew/Library/Homebrew/brew.sh: line 4: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory"></a>/home/linuxbrew/.linuxbrew/Homebrew/Library/Homebrew/brew.sh: line 4: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory</h3><p><a href="https://askubuntu.com/questions/114759/warning-setlocale-lc-all-cannot-change-locale" target="_blank" rel="noopener">https://askubuntu.com/questions/114759/warning-setlocale-lc-all-cannot-change-locale</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt install -y locales</div><div class="line">sudo vim /etc/locale.gen</div><div class="line"><span class="comment"># uncomment en_us.UTF-8 UTF-8 in locale.gen, then save</span></div><div class="line">sudo locale-gen</div></pre></td></tr></table></figure><h2 id="Upgrade-to-WSL-2"><a href="#Upgrade-to-WSL-2" class="headerlink" title="Upgrade to WSL 2"></a>Upgrade to WSL 2</h2><p>(2020/06/26) Note that if your project is put on Windows file system and<br>shared to WSL distro, currently changing files from Windows won’t trigger<br>file change notifications on Linux side<br>(see <a href="https://github.com/microsoft/WSL/issues/4739" target="_blank" rel="noopener">https://github.com/microsoft/WSL/issues/4739</a>). A workaround<br>would be move all files into WSL file system, and access them<br>from Windows (see <a href="#Access-WSL-filesystem-from-Windows">below</a> for instructions)</p><ol><li>Download amnd install WSL 2 Kernel from<br><a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-kernel" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/wsl/wsl2-kernel</a></li><li><p>Enable the ‘Virtual Machine Platform’ optional component</p><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/wsl/install-win10</a></li><li>Open Powershell as Administrator and run: <figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</div></pre></td></tr></table></figure></li></ul></li><li> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wsl --<span class="built_in">set</span>-version Ubuntu 2</div></pre></td></tr></table></figure></li></ol><p>Prefer setting default wsl version to 2 after this<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wsl --<span class="built_in">set</span>-default-version 2</div></pre></td></tr></table></figure></p><h2 id="Access-WSL-filesystem-from-Windows"><a href="#Access-WSL-filesystem-from-Windows" class="headerlink" title="Access WSL filesystem from Windows"></a>Access WSL filesystem from Windows</h2><p>It is not recommend to edit files in WSL directly from Windows by opening files<br>from C drive (or the drive you installed the WSL). I recall that resulted<br>messing up file permissions when I tried that for WSL 1 distro. It’s also not<br>possible for WSL 2 distro since the entire disk is stored as a virtual disk<br>file. However, you can safely access WSL disks by navigating to <code>\\wsl$\</code> in<br>file explorer.</p><p>(source: <a href="https://www.omgubuntu.co.uk/2020/04/access-wsl-files-windows-explorer" target="_blank" rel="noopener">https://www.omgubuntu.co.uk/2020/04/access-wsl-files-windows-explorer</a>)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There is already one when you enable WSL, but I’d like to install it on&lt;br&gt;different drives, and not need to worry about messing it up, so I discovered&lt;br&gt;a WSL Management tool &lt;a href=&quot;https://github.com/DDoSolitary/LxRunOffline&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LxRunOffline&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://fsworld009.github.io/blog/tags/linux/"/>
    
      <category term="Windows" scheme="https://fsworld009.github.io/blog/tags/Windows/"/>
    
      <category term="WSL" scheme="https://fsworld009.github.io/blog/tags/WSL/"/>
    
      <category term="Ubuntu" scheme="https://fsworld009.github.io/blog/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Issue with pacman</title>
    <link href="https://fsworld009.github.io/blog/2019/01/20/pacman-issue/"/>
    <id>https://fsworld009.github.io/blog/2019/01/20/pacman-issue/</id>
    <published>2019-01-20T14:01:45.000Z</published>
    <updated>2020-06-25T16:02:47.997Z</updated>
    
    <content type="html"><![CDATA[<p>Been struggling to get my Arch Linux instance to do the upgrade for the past<br>two days.</p><p>First off, one of the PGP Key on my local is expired, so every pacman command<br>will return<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">error: </span>pkgbuilder: signature from "Chris Warrick &lt;kwpolska@gmail.com&gt;" is unknown trust</div></pre></td></tr></table></figure></p><p>and I cannot update <code>archlinux-keyring</code> to get the latest, renewed key because<br>I don’t have a valid key, it’s a infinite loop.</p><p>Later on I figured out that I need to temporarily disable pkgbuilder upgrades,<br>described in <a href="../../../../2017/12/29/pacman/">here</a>.</p><a id="more"></a><p>After the upgrade is done, I cannot open VS Code or Google Chrome anymore.<br>It looks like an issue with chromium based Apps.</p><p><code>code --verbose</code> returns<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/var/run/dbus/system_bus_socket: No such <span class="keyword">file</span> <span class="keyword">or</span> directory</div><div class="line"><span class="keyword">shared</span> memfd <span class="keyword">open</span>() failed: <span class="keyword">Function</span> <span class="keyword">not</span> implemented</div></pre></td></tr></table></figure></p><p>and <code>google-chrome-stable --verbose</code> returns<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failed <span class="keyword">to</span> move <span class="keyword">to</span> new namespace: PID namespaces supported,<span class="built_in"> Network </span>namespace supported, but failed: errno = Permission denied</div></pre></td></tr></table></figure></p><p>I managed to resolve d-bus issue by<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /var/run/dbus</div><div class="line">sudo dbus-daemon --config-file=/usr/share/dbus-1/system.conf</div></pre></td></tr></table></figure></p><p>and the namespace issue by opening bash with Administrator, but I’m not able to<br>resolve that memfd open() error.</p><p>Turns out this is a regression introduced by udev and libudev1.<br><a href="https://github.com/WhitewaterFoundry/WLinux/issues/285#issuecomment-453153832" target="_blank" rel="noopener">(source)</a></p><p>Now I’m stuck here because pacman basically forcing every package to be on the<br>latest version. Yes there is a way to downgrade certain packages, but that means<br>all dependencies will be downgraded, too, so I can’t garantee that would work<br>as well.</p><p>At this point I am thinking about giving up on Arch Linux and pacman, almost<br>every time there is some issue when doing system upgrades.</p><p>Now thinking about it, the way pacman handle packages is unstable to me.</p><p>Sometimes I just need to upgrade one package, but pacman will upgrade everything<br>to the latest, which means the whole system will be at risk of breaking.</p><p>It has its advantages, but I don’t think I have enough knowledge and patience<br>to handle these upgrades issues.</p><p>I think it’s time to try other distros :thinking_face:</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Been struggling to get my Arch Linux instance to do the upgrade for the past&lt;br&gt;two days.&lt;/p&gt;
&lt;p&gt;First off, one of the PGP Key on my local is expired, so every pacman command&lt;br&gt;will return&lt;br&gt;&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;error: &lt;/span&gt;pkgbuilder: signature from &quot;Chris Warrick &amp;lt;kwpolska@gmail.com&amp;gt;&quot; is unknown trust&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;and I cannot update &lt;code&gt;archlinux-keyring&lt;/code&gt; to get the latest, renewed key because&lt;br&gt;I don’t have a valid key, it’s a infinite loop.&lt;/p&gt;
&lt;p&gt;Later on I figured out that I need to temporarily disable pkgbuilder upgrades,&lt;br&gt;described in &lt;a href=&quot;../../../../2017/12/29/pacman/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Archlinux" scheme="https://fsworld009.github.io/blog/tags/Archlinux/"/>
    
      <category term="linux" scheme="https://fsworld009.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Setup Arch Linux in WSL</title>
    <link href="https://fsworld009.github.io/blog/2018/06/24/wsl-archlinux/"/>
    <id>https://fsworld009.github.io/blog/2018/06/24/wsl-archlinux/</id>
    <published>2018-06-24T08:37:11.000Z</published>
    <updated>2020-06-25T16:02:48.103Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I have tried to install Arch Linux under WSL (Windows Subsystem for Linux). So far I have positive experience and I actually prefer WSL over VirtualBox as my working environment under Windows 10.</p><p>Of course WSL is not perfect, compare to installing Arch under VirtualBox:</p><ul><li>Pros<ul><li>Faster startup time (just as fast as open a cmd window)</li><li>Share files bet</li><li>Running GUI apps via XServer is much more responsive, I think this is mostly because we don’t need to run GUI via SSH with this setup.</li></ul></li><li>Cons<ul><li>No “save machine state” functionality from VirtualBox</li><li>No audio support</li><li>There will always be a chance of running into compatibility issues, especially GUI apps.</li><li>You cannot edit any file under WSL data folder from Windows side, the file may become corrupted in WSL.</li><li>WSL won’t see any new file created (except share folders under <code>/mnt/</code>), so if you want to copy some files into WSL, you have to copy it in WSL shell via <code>/mnt/</code> folder</li></ul></li></ul><p>I prefer WSL mainly because of better GUI experience, as I use VS Code for development most of the time.<br>  <a id="more"></a></p><h2 id="Download-and-install"><a href="#Download-and-install" class="headerlink" title="Download and install"></a>Download and install</h2><ul><li>Go to <a href="https://github.com/yuk7/ArchWSL" target="_blank" rel="noopener">https://github.com/yuk7/ArchWSL</a> and download the installer, follow the installation steps in README</li><li>Once you open the Arch.exe, the location for this WSL instance will be recorded in registry, so it’s better to decide where you’d like to put it before starting the installation.</li></ul><h2 id="Create-user"><a href="#Create-user" class="headerlink" title="Create user"></a>Create user</h2><ol><li>Open <code>Arch.exe</code>, you should be prompted as <code>root</code> user</li><li><p>run <code>visudo</code> and remove comment (<code>#</code>) for the line 85:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%wheel <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) NOPASSWD: <span class="keyword">ALL</span></div></pre></td></tr></table></figure></li><li><p><a href="https://wiki.archlinux.org/index.php/users_and_groups" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/users_and_groups</a></p><ol><li><code>useradd -m -G wheel -s /bin/bash user1V</code></li><li><code>passwd user1</code></li></ol></li><li><p>Change default login user to the user you created:</p><ol><li>exit Arch.exe and goback to cmd</li><li><code>Arch.exe config --default-user user1</code></li></ol></li></ol><h2 id="Run-GUI-apps"><a href="#Run-GUI-apps" class="headerlink" title="Run GUI apps"></a>Run GUI apps</h2><ol><li>Use one of the following to run XServer on Windows:<ul><li><a href="VcXsrv">https://sourceforge.net/projects/vcxsrv/</a></li><li><a href="Xming">https://sourceforge.net/projects/xming/</a></li><li><a href="MobaXterm">https://mobaxterm.mobatek.net/</a></li><li><a href="X410">https://token2shell.com/x410/</a><ul><li>This one is not free, but is the best of what I have tried so far</li></ul></li></ul></li><li>Generally there are 2 modes for X-Server”<ul><li>Multi-windowed mode: use this if you only want to run individual GUI apps and have better “transparent” experience across Windows and Linux apps.</li><li>One-windowd (One large window) mode: use this if you want to run a Linux desktop environment (GNome, XFCE4, KDE…), and then run GUIs from environment.</li></ul></li></ol><ul><li>I personally prefer multi-windoed mode, but I also installed XFCE4 in my Arch instance, in case of unsupported app or I need to test out GUI apps without XServer (For example, fcitx cannot be properly configured without entering XFCE4).</li></ul><ol><li>In WSL shell run <code>export DISPLAY=:0</code></li><li>Run GUI apps with <code>&amp;</code>, for example <code>konsole &amp;</code><ul><li>Note that closing the shell will also close all GUI executed from this shell.</li></ul></li></ol><h3 id="Configure-XWindow"><a href="#Configure-XWindow" class="headerlink" title="Configure XWindow"></a>Configure XWindow</h3><ul><li>Install <code>lxappearance</code> to configure appearance, cursor theme…etc.</li></ul><h3 id="Example-setup"><a href="#Example-setup" class="headerlink" title="Example setup"></a>Example setup</h3><p>This is my current setup:</p><ul><li>Open MobaXterm and start XServer (because this is the only one that supports VS Code)</li><li>Use ConEmu to run Arch.exe</li><li><code>export DISPLAY=:0</code></li><li>Run Konsole: <code>konsole &amp;</code></li><li>Run GUI from this ConEmu Tab, run other commands from Konsole</li></ul><h3 id="Other-references-tutorials"><a href="#Other-references-tutorials" class="headerlink" title="Other references / tutorials:"></a>Other references / tutorials:</h3><ul><li><a href="https://blog.ropnop.com/configuring-a-pretty-and-usable-terminal-emulator-for-wsl/" target="_blank" rel="noopener">https://blog.ropnop.com/configuring-a-pretty-and-usable-terminal-emulator-for-wsl/</a></li><li><a href="https://nickjanetakis.com/blog/using-wsl-and-mobaxterm-to-create-a-linux-dev-environment-on-windows" target="_blank" rel="noopener">https://nickjanetakis.com/blog/using-wsl-and-mobaxterm-to-create-a-linux-dev-environment-on-windows</a></li><li><a href="/blog/2017/12/28/archlinux/" title="My previous post">My previous post</a> about other topics related to GUI (such as IME).</li></ul><h2 id="Share-files-with-Windows"><a href="#Share-files-with-Windows" class="headerlink" title="Share files with Windows"></a>Share files with Windows</h2><ul><li>By default all windows drives are mount on <code>mnt</code>, this is considered as  share folders between Windows and WSL.</li><li>You can turn this off by <code>Arch.exe config --mount-drive off</code></li><li><strong>DO NOT</strong>  edit any file in WSL folder (even your home folder) with Windows tools, the files might become corrupted.</li><li>Also do not copy data into WSL data folder from Windows, WSL won’t detect it. Instead use share folder and copy files from WSL side.</li><li>It is safe to edit files under <code>/mnt/</code> share folders from both side.</li></ul><h2 id="Backup-move-instance"><a href="#Backup-move-instance" class="headerlink" title="Backup / move instance"></a>Backup / move instance</h2><ul><li>Registry location: <code>[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Lxss\{(WSLID)}</code></li><li>Update the <code>BasePath</code> key after moving to preserve the WSL instance (not tested yet).</li><li>When moving this Arch instance to another Windows 10 installation, copy all data and registry to the new installation (not tested yet)</li></ul><h2 id="Sound-support"><a href="#Sound-support" class="headerlink" title="Sound support"></a>Sound support</h2><p>Use pulseaudio for sound</p><p>On Windows side:</p><ul><li>download pulseaudio from <a href="https://github.com/kitor/wsl/" target="_blank" rel="noopener">https://github.com/kitor/wsl/</a></li><li>run <code>pulseaudio.exe</code> to start server (could launch it inside WSL)</li><li>it seems that this version will not shut down properly, would have to do <code>killall pulseaudio.exe</code> in bash or kill it via Task Manager<br>On Linux side:</li><li><code>pacman -Syu pulseaudio</code></li><li>Also need <code>xfce4-pulseaudio-plugin</code> for Xfce4</li><li><p><code>sudo vim /etc/pulse/client.conf</code> and add this line:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">default</span>-<span class="keyword">server</span> = tcp:localhost</div></pre></td></tr></table></figure></li><li><p>Restart xfce4</p></li></ul><p>Could also check <a href="https://token2shell.com/howto/x410/enabling-sound-in-wsl-ubuntu-let-it-sing/" target="_blank" rel="noopener">the guide</a> from X410 official site</p><h2 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h2><p>Since it requires some setup to properly launch desktop environment, it is<br>easier to put everything in a launch script. Here is<br><a href="https://github.com/fsworld009/dotfiles/blob/master/wsl/startxfce4.sh" target="_blank" rel="noopener">my example</a>.</p><h2 id="Troubleshooting-notes"><a href="#Troubleshooting-notes" class="headerlink" title="Troubleshooting notes"></a>Troubleshooting notes</h2><h3 id="fakeroot-tcp"><a href="#fakeroot-tcp" class="headerlink" title="fakeroot-tcp"></a>fakeroot-tcp</h3><p><code>fakeroot</code> is not supported in WSL, so this Arch instance replaced it with <code>fakeroot-tcp</code>.</p><p>Sometimes when installing packages, you’ll get prompted if you’d like to replace <code>fakeroot-tcp</code> with <code>fakeroot</code>, be sure to choose NO. If you happened to replace it, you’ll be stuck with a broken system. As <code>fakeroot</code> is not working but a working <code>fakeroot</code> is required in order to reinstall <code>fakeroot-tcp</code> from AUR again. </p><p>The solution is to build a <code>fakeroot-tcp</code> package from a working Arch linux system and copy the .tar file, or download it from <a href="https://davidtw.co/writings/2017/archlinux-on-the-windows-subsystem-for-linux" target="_blank" rel="noopener">https://davidtw.co/writings/2017/archlinux-on-the-windows-subsystem-for-linux</a>, and install it using <code>pacman -U</code>. (This article also explains this issue better)</p><h3 id="Cannot-run-QT5-apps"><a href="#Cannot-run-QT5-apps" class="headerlink" title="Cannot run QT5 apps"></a>Cannot run QT5 apps</h3><ul><li><p>When running QT5, I got this error:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">error </span>while loading shared libraries: libQt5Core.so.5: cannot open shared object file: No such file or directory</div></pre></td></tr></table></figure></li><li><p>Workaround: <code>sudo strip --remove-section=.note.ABI-tag /usr/lib/libQt5Core.so.5.10.1</code></p><ul><li><a href="https://github.com/Microsoft/WSL/issues/3023" target="_blank" rel="noopener">https://github.com/Microsoft/WSL/issues/3023</a></li></ul></li></ul><h3 id="Disable-PATH-from-Windows"><a href="#Disable-PATH-from-Windows" class="headerlink" title="Disable PATH from Windows"></a>Disable PATH from Windows</h3><ul><li>By default <code>$PATH</code> included all PATHs from Windows, this can be changed by <code>Arch.exe config --append-path off</code></li><li>For me I got <code>HRESULT:0x80004005</code> error when trying to do so, I solved by going to registry (refer above for registry location) and changed the <code>Flags</code> key to 5.<ul><li>You can see how to configure this field <a href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/api/wslapi/ne-wslapi-wsl_distribution_flags" target="_blank" rel="noopener">here</a>.</li><li>If nothing changed after you edited the flag, try reboot Windows.</li></ul></li></ul><h3 id="Reboot-WSL-instance"><a href="#Reboot-WSL-instance" class="headerlink" title="Reboot WSL instance"></a>Reboot WSL instance</h3><ul><li><code>sudo killall -r &#39;.*&#39;</code></li><li><a href="https://superuser.com/questions/1126721/rebooting-ubuntu-on-windows-without-rebooting-windows" target="_blank" rel="noopener">https://superuser.com/questions/1126721/rebooting-ubuntu-on-windows-without-rebooting-windows</a></li></ul><h3 id="Cursor-icon-is-too-big-and-not-rendered-properly-when-running-GUI-via-XServer"><a href="#Cursor-icon-is-too-big-and-not-rendered-properly-when-running-GUI-via-XServer" class="headerlink" title="Cursor icon is too big and not rendered properly when running GUI via XServer"></a>Cursor icon is too big and not rendered properly when running GUI via XServer</h3><ul><li>Solution: switch to a cursor theme that is smaller, such as <code>xcursor-simpleandsoft</code></li><li><a href="https://wiki.archlinux.org/index.php/Cursor_themes" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Cursor_themes</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I have tried to install Arch Linux under WSL (Windows Subsystem for Linux). So far I have positive experience and I actually prefer WSL over VirtualBox as my working environment under Windows 10.&lt;/p&gt;
&lt;p&gt;Of course WSL is not perfect, compare to installing Arch under VirtualBox:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pros&lt;ul&gt;
&lt;li&gt;Faster startup time (just as fast as open a cmd window)&lt;/li&gt;
&lt;li&gt;Share files bet&lt;/li&gt;
&lt;li&gt;Running GUI apps via XServer is much more responsive, I think this is mostly because we don’t need to run GUI via SSH with this setup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons&lt;ul&gt;
&lt;li&gt;No “save machine state” functionality from VirtualBox&lt;/li&gt;
&lt;li&gt;No audio support&lt;/li&gt;
&lt;li&gt;There will always be a chance of running into compatibility issues, especially GUI apps.&lt;/li&gt;
&lt;li&gt;You cannot edit any file under WSL data folder from Windows side, the file may become corrupted in WSL.&lt;/li&gt;
&lt;li&gt;WSL won’t see any new file created (except share folders under &lt;code&gt;/mnt/&lt;/code&gt;), so if you want to copy some files into WSL, you have to copy it in WSL shell via &lt;code&gt;/mnt/&lt;/code&gt; folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I prefer WSL mainly because of better GUI experience, as I use VS Code for development most of the time.&lt;br&gt;
    
    </summary>
    
    
      <category term="Archlinux" scheme="https://fsworld009.github.io/blog/tags/Archlinux/"/>
    
      <category term="Windows" scheme="https://fsworld009.github.io/blog/tags/Windows/"/>
    
      <category term="WSL" scheme="https://fsworld009.github.io/blog/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>Package Managers for Windows and Mac</title>
    <link href="https://fsworld009.github.io/blog/2018/06/18/package-managers-windows-mac/"/>
    <id>https://fsworld009.github.io/blog/2018/06/18/package-managers-windows-mac/</id>
    <published>2018-06-18T03:16:48.000Z</published>
    <updated>2020-06-25T17:03:59.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cheetsheet"><a href="#Cheetsheet" class="headerlink" title="Cheetsheet"></a>Cheetsheet</h2><table><thead><tr><th>Usage</th><th>Choco</th><th>Brew</th></tr></thead><tbody><tr><td>Upgrade manager</td><td>choco upgrade chocolatey</td><td>brew update</td></tr><tr><td>List installed packages</td><td>choco list –local-only</td><td>brew list</td></tr><tr><td>Search package</td><td>choco search pkg –by-id-only</td><td>brew search pkg1</td></tr><tr><td>Install package</td><td>choco install pkg1 pkg2</td><td>brew install pkg1 pkg2</td></tr><tr><td>Check outdated packages</td><td>choco outdated</td><td>brew outdated</td></tr><tr><td>Update all packages</td><td>choco upgrade all</td><td>brew upgrade</td></tr><tr><td>Update specific packages</td><td>choco upgrade pkg1 pkg2</td><td>brew upgrade pkg1 pkg2</td></tr></tbody></table><a id="more"></a><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ul><li><a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey</a></li><li>Automatically agree licenses and agreements for one command<ul><li>add <code>-y</code> flag</li></ul></li><li>Automatically agree licenses and agreements globally<ul><li><code>choco feature enable -n allowGlobalConfirmation</code></li></ul></li><li><code>choco update</code> is deprecated</li></ul><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><ul><li><a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a></li><li><a href="https://github.com/Homebrew/homebrew-cask-fonts" target="_blank" rel="noopener">homebrew-cask-fonts</a> for installing fonts</li><li>Add <code>-v</code> to have verbose output (sp that you know it is not crashed)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Cheetsheet&quot;&gt;&lt;a href=&quot;#Cheetsheet&quot; class=&quot;headerlink&quot; title=&quot;Cheetsheet&quot;&gt;&lt;/a&gt;Cheetsheet&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;th&gt;Choco&lt;/th&gt;
&lt;th&gt;Brew&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Upgrade manager&lt;/td&gt;
&lt;td&gt;choco upgrade chocolatey&lt;/td&gt;
&lt;td&gt;brew update&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List installed packages&lt;/td&gt;
&lt;td&gt;choco list –local-only&lt;/td&gt;
&lt;td&gt;brew list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Search package&lt;/td&gt;
&lt;td&gt;choco search pkg –by-id-only&lt;/td&gt;
&lt;td&gt;brew search pkg1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Install package&lt;/td&gt;
&lt;td&gt;choco install pkg1 pkg2&lt;/td&gt;
&lt;td&gt;brew install pkg1 pkg2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Check outdated packages&lt;/td&gt;
&lt;td&gt;choco outdated&lt;/td&gt;
&lt;td&gt;brew outdated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update all packages&lt;/td&gt;
&lt;td&gt;choco upgrade all&lt;/td&gt;
&lt;td&gt;brew upgrade&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update specific packages&lt;/td&gt;
&lt;td&gt;choco upgrade pkg1 pkg2&lt;/td&gt;
&lt;td&gt;brew upgrade pkg1 pkg2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://fsworld009.github.io/blog/tags/Mac/"/>
    
      <category term="Windows" scheme="https://fsworld009.github.io/blog/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Semantic UI</title>
    <link href="https://fsworld009.github.io/blog/2018/01/03/semantic-ui/"/>
    <id>https://fsworld009.github.io/blog/2018/01/03/semantic-ui/</id>
    <published>2018-01-03T14:37:09.000Z</published>
    <updated>2020-06-25T17:03:18.534Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://semantic-ui.com/" target="_blank" rel="noopener">Semantic UI</a> is a component-based webpage layout Framework. I have used it on some of my personal projects and I really like it. Here are some of the benefits:</p><ul><li>Components driven. You only pick up components you need</li><li>Ability to mix different themes in one project</li><li>Provide site level overrides so you don’t need to touch theme files themselves</li><li>Built-in Form validation</li><li>Components have initialize and destroy methods so they can be integrated as ReactJs and Vue.js components</li></ul><a id="more"></a><h2 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h2><ul><li>jQuery</li><li>npm and gulp for customized builds</li></ul><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>Official Getting started: <a href="https://semantic-ui.com/introduction/getting-started.html" target="_blank" rel="noopener">https://semantic-ui.com/introduction/getting-started.html</a></p><p>You can either download the prepackaged zip or use <code>npm</code> and <code>gulp</code> to do a customized build. I recommend take some time to understand how to do customized builds, because you cannot change themes or remove unused components in prepackaged version, which is a big selling point for Semantic UI.</p><ol><li>install <code>gulp</code> globally: <code>npm install -g gulp</code></li><li>install semantic-ui in your project: <code>npm install semantic-ui</code></li><li>You will see a set-up Semantic UI prompt. I usually go with ‘Automatic’-&gt;’Yes’-&gt;’semantic/‘ options. You can (and you will have to) edit config files manually later on.</li><li>After the installation, there will be <code>semantic.json</code> and <code>semantic</code> folder.</li></ol><p>Once you have finished the prompt, it will not be shown again when doing <code>npm install</code> again. The solution is to delete semantic-ui folder in <code>node_modules</code> and run <code>npm install</code> again.</p><h2 id="Basic-configurations"><a href="#Basic-configurations" class="headerlink" title="Basic configurations"></a>Basic configurations</h2><p>In <code>semantic.json</code>, you can change the output folders in <code>output</code> option. The folders specified in <code>output</code> option should be excluded in version control. There is also a <code>clean</code> option that should match the output base folder but I found it is not really working.</p><p>There is also a <code>clean</code> option which you can set clean folder when running <code>gulp clean</code>. Unfortunately it will not work if you set it to a folder outside <code>semantic</code> folder:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error: </span>Cannot delete files/folders outside the current working directory. Can be overriden with the `force` option.</div></pre></td></tr></table></figure><p>I haven’t found a way to solve this issue without changing gulp task source codes.</p><h2 id="Choose-themes-for-components"><a href="#Choose-themes-for-components" class="headerlink" title="Choose themes for components"></a>Choose themes for components</h2><p>Official theming guide: <a href="https://semantic-ui.com/usage/theming.html" target="_blank" rel="noopener">https://semantic-ui.com/usage/theming.html</a></p><p>In <code>src/themes/</code> You can see all available themes.<br>To config themes, edit <code>src/theme.config</code>. (I recommend to have a backup for this file, like <code>theme.config.original</code>). By default all components are using ‘default’ theme.</p><p>The way Semantic UI works is that we configure themes for each components. For example, if I want to use <code>material</code> theme for <code>dropdown</code> component, I will edit the following line:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@dropdown   :</span> <span class="string">'material'</span>;</div></pre></td></tr></table></figure></p><p>That’s pretty much it. However, you need to make sure the theme actually has that component implemented. Say I want to use <code>material</code> theme for <code>form</code> components, but in <code>src/themes/material/collections</code> there is no form components implementations. Hence, if you do<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@form   :</span> <span class="string">'material'</span>;</div></pre></td></tr></table></figure></p><p>The output will not have form component at all.</p><h2 id="Edit-Site-specific-styles"><a href="#Edit-Site-specific-styles" class="headerlink" title="Edit Site-specific styles"></a>Edit Site-specific styles</h2><p>In <code>src/site</code>, you can also add specific less variables and styles for the project for each component.</p><p>The .variables files are used to override component variables like overriding colors:</p><p>src/site/globals/site.variables<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Material Theme Color rewrite */</span></div><div class="line"><span class="comment">/* https://materialuicolors.co/ Level 500 &amp; 200 */</span></div><div class="line"><span class="comment">/*---  Colors  ---*/</span></div><div class="line"><span class="variable">@blue             :</span> <span class="number">#2196F3</span>;</div><div class="line"><span class="variable">@green            :</span> <span class="number">#4CAF50</span>;</div><div class="line"><span class="variable">@grey             :</span> <span class="number">#9E9E9E</span>;</div><div class="line"><span class="variable">@orange           :</span> <span class="number">#FF9800</span>;</div><div class="line"><span class="variable">@pink             :</span> <span class="number">#E91E63</span>;</div><div class="line"><span class="variable">@purple           :</span> <span class="number">#9C27B0</span>;</div><div class="line"><span class="variable">@red              :</span> <span class="number">#F44336</span>;</div><div class="line"><span class="variable">@teal             :</span> <span class="number">#009688</span>;</div><div class="line"><span class="variable">@yellow           :</span> <span class="number">#FFEB3B</span>;</div><div class="line"></div><div class="line"><span class="comment">/*---  Light Colors  ---*/</span></div><div class="line"><span class="variable">@lightBlue        :</span> <span class="number">#90CAF9</span>;</div><div class="line"><span class="variable">@lightGreen       :</span> <span class="number">#A5D6A7</span>;</div><div class="line"><span class="variable">@lightOrange      :</span> <span class="number">#FFCC80</span>;</div><div class="line"><span class="variable">@lightPink        :</span> <span class="number">#F48FB1</span>;</div><div class="line"><span class="variable">@lightPurple      :</span> <span class="number">#CE93D8</span>;</div><div class="line"><span class="variable">@lightRed         :</span> <span class="number">#EF9A9A</span>;</div><div class="line"><span class="variable">@lightTeal        :</span> <span class="number">#80CBC4</span>;</div><div class="line"><span class="variable">@lightYellow      :</span> <span class="number">#FFF59D</span>;</div></pre></td></tr></table></figure></p><p>The .overrides files are used to expend less rules. For example, to have colors in regular texts:</p><p>src/site/globals/site.overrides<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@text-colors:</span> blue, green, orange, pink, purple, red, teal, yellow, black, grey, white;</div><div class="line"><span class="selector-class">.text</span> &#123;</div><div class="line">    <span class="selector-class">.-</span>(<span class="variable">@i</span>: length(<span class="variable">@text-colors</span>)) <span class="keyword">when</span> (<span class="variable">@i</span> &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="variable">@c:</span> extract(<span class="variable">@text-colors</span>, <span class="variable">@i</span>);</div><div class="line">        <span class="selector-tag">&amp;</span><span class="selector-class">.@&#123;c&#125;</span> &#123; <span class="attribute">color</span>: <span class="variable">@@c</span> &#125;</div><div class="line">        <span class="selector-class">.-</span>((<span class="variable">@i</span> - <span class="number">1</span>));</div><div class="line">    &#125;<span class="selector-class">.-</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>(source: <a href="https://github.com/Semantic-Org/Semantic-UI/issues/1885#issuecomment-226047499" target="_blank" rel="noopener">https://github.com/Semantic-Org/Semantic-UI/issues/1885#issuecomment-226047499</a>)</p><p>Both variables and overrides have the same priority setting: <code>site &gt; chosen theme &gt; default theme</code>. More details are explained here: <a href="http://learnsemantic.com/themes/overview.html" target="_blank" rel="noopener">http://learnsemantic.com/themes/overview.html</a></p><h2 id="Build-assets"><a href="#Build-assets" class="headerlink" title="Build assets"></a>Build assets</h2><p>After the configurations above are done, we need to generate final assets so that we can use the framework in our project.</p><p>Under <code>semantic</code> folder, run <code>gulp clean build</code> to generate assets.</p><p>Make sure that the script output files in the log if the output folder is outside <code>semantic</code> folder and clean task failed, or you can remove the folder manually just to be safe.</p><p>Every time you make changes on <code>semantic.json</code>, <code>theme.config</code>, <code>site</code>, you need to rebuild the assets.</p><p>Full gulp commands: <a href="https://semantic-ui.com/introduction/build-tools.html" target="_blank" rel="noopener">https://semantic-ui.com/introduction/build-tools.html</a></p><h2 id="Remove-unused-components-on-built-assets"><a href="#Remove-unused-components-on-built-assets" class="headerlink" title="Remove unused components on built assets"></a>Remove unused components on built assets</h2><p>Most of the time we are not going to use all components in one project. It is recommend to remove unused components to reduce assets size.</p><p>Add <code>components</code> property to <code>semantic.json</code>:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">"components": [</div><div class="line">  "reset",</div><div class="line">  "site",</div><div class="line">  "button",</div><div class="line">  "container",</div><div class="line">  "divider",</div><div class="line">  "flag",</div><div class="line">  "header",</div><div class="line">  "icon",</div><div class="line">  "image",</div><div class="line">  "input",</div><div class="line">  "label",</div><div class="line">  "list",</div><div class="line">  "loader",</div><div class="line">  "rail",</div><div class="line">  "reveal",</div><div class="line">  "segment",</div><div class="line">  "step",</div><div class="line">  "breadcrumb",</div><div class="line">  "form",</div><div class="line">  "grid",</div><div class="line">  "menu",</div><div class="line">  "message",</div><div class="line">  "table",</div><div class="line">  "ad",</div><div class="line">  "card",</div><div class="line">  "comment",</div><div class="line">  "feed",</div><div class="line">  "item",</div><div class="line">  "statistic",</div><div class="line">  "accordion",</div><div class="line">  "checkbox",</div><div class="line">  "dimmer",</div><div class="line">  "dropdown",</div><div class="line">  "embed",</div><div class="line">  "modal",</div><div class="line">  "nag",</div><div class="line">  "popup",</div><div class="line">  "progress",</div><div class="line">  "rating",</div><div class="line">  "search",</div><div class="line">  "shape",</div><div class="line">  "sidebar",</div><div class="line">  "sticky",</div><div class="line">  "tab",</div><div class="line">  "transition",</div><div class="line">  "api",</div><div class="line">  "form",</div><div class="line">  "state",</div><div class="line">  <span class="string">"visibility"</span></div><div class="line">]</div></pre></td></tr></table></figure></p><p>then start to remove unused components. Rebuild assets after every edit.</p><p>Keep in mind:</p><ol><li><code>site</code> and <code>reset</code> are essential.</li><li><code>transition</code> and <code>visibility</code> are required for some components like <code>modal</code>. It is not documented so most of the time I would just leave them included.</li></ol><p>Without <code>components</code> property, the build script will include all components.</p><h2 id="Documentation-and-usage-notes"><a href="#Documentation-and-usage-notes" class="headerlink" title="Documentation and usage notes"></a>Documentation and usage notes</h2><ul><li><p>Check <a href="https://semantic-ui.com/" target="_blank" rel="noopener">Official website</a> for documentations.</p></li><li><p>Class names may require to be placed in order</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui grid"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"four wide column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"twelve wide column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>Put class name as <code>wide four column</code> won’t work in this case.</p></li><li><p>For each component that involves javascript, the component implementations are declared as jquery instance methods, the method name is usually the component name, like <code>$(selector).dropdown()</code> is for dropdown and <code>$(selector),modal()</code> is for modal.</p><ul><li><p>To initialize the component:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.ui.dropdown'</span>).dropdown(settings)</div></pre></td></tr></table></figure><p><code>settings</code> is an object that contains initialize options like most jQuery do. Available options are listed under <code>Settings</code> tab.</p></li><li><p>To invoke component behavior (methods):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.ui.dropdown'</span>).dropdown(<span class="string">'set value'</span>, value);</div></pre></td></tr></table></figure></li><li><p>Note that behavior name may have spaces and you should not remove them or convert them to camel case.</p></li></ul></li><li><p>Most javascript components offer the <code>destroy</code> behavior, we can use it to integrate with React and Vue.js life cycle. Take Vue.js for example, we need to implement <code>mounted</code>, <code>updated</code>, and <code>beforeDestroy</code> life cycle to create and destroy component:</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">mounted() &#123;</div><div class="line">    <span class="keyword">this</span>.create();</div><div class="line">&#125;,</div><div class="line">updated()&#123;</div><div class="line">    <span class="keyword">this</span>.destroy();</div><div class="line">    <span class="keyword">this</span>.create();</div><div class="line">&#125;,</div><div class="line">beforeDestroy()&#123;</div><div class="line">    <span class="keyword">this</span>.destroy();</div><div class="line">&#125;, </div><div class="line">methods: &#123;</div><div class="line">    create()&#123;</div><div class="line">    <span class="keyword">var</span> $dropdown = $(<span class="keyword">this</span>.$el).find(<span class="string">".ui.dropdown"</span>);</div><div class="line">    $dropdown.dropdown(&#123;...&#125;);</div><div class="line">    &#125;,</div><div class="line">    destroy()&#123;</div><div class="line">    <span class="keyword">var</span> $dropdown = $(<span class="keyword">this</span>.$el).find(<span class="string">".ui.dropdown"</span>);</div><div class="line">    $dropdown.dropdown(<span class="string">'destroy'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>I would suggest to create a <code>Dropdown</code> component to abstract the create/destroy logics for better reusability. Same goes for all Semantic UI components.</li></ul></li></ul><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul><li><a href="http://learnsemantic.com/developing/glossary.html" target="_blank" rel="noopener">Glossary</a></li><li><a href="https://semantic-ui.com/examples/responsive.html" target="_blank" rel="noopener">Responsive Grid template</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://semantic-ui.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Semantic UI&lt;/a&gt; is a component-based webpage layout Framework. I have used it on some of my personal projects and I really like it. Here are some of the benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Components driven. You only pick up components you need&lt;/li&gt;
&lt;li&gt;Ability to mix different themes in one project&lt;/li&gt;
&lt;li&gt;Provide site level overrides so you don’t need to touch theme files themselves&lt;/li&gt;
&lt;li&gt;Built-in Form validation&lt;/li&gt;
&lt;li&gt;Components have initialize and destroy methods so they can be integrated as ReactJs and Vue.js components&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Front-End" scheme="https://fsworld009.github.io/blog/tags/Front-End/"/>
    
      <category term="javascript" scheme="https://fsworld009.github.io/blog/tags/javascript/"/>
    
      <category term="semantic-ui" scheme="https://fsworld009.github.io/blog/tags/semantic-ui/"/>
    
      <category term="css" scheme="https://fsworld009.github.io/blog/tags/css/"/>
    
      <category term="npm" scheme="https://fsworld009.github.io/blog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Pacman package manager cheatsheet</title>
    <link href="https://fsworld009.github.io/blog/2017/12/29/pacman/"/>
    <id>https://fsworld009.github.io/blog/2017/12/29/pacman/</id>
    <published>2017-12-29T09:21:33.000Z</published>
    <updated>2020-06-25T16:02:48.009Z</updated>
    
    <content type="html"><![CDATA[<p>Pacman notes</p><h2 id="Cheatsheet"><a href="#Cheatsheet" class="headerlink" title="Cheatsheet"></a>Cheatsheet</h2><table><thead><tr><th>Usage</th><th>Command</th></tr></thead><tbody><tr><td>Package upgrade</td><td>pacman -Syu</td></tr><tr><td>Sync package DB</td><td>pacman -Sy</td></tr><tr><td>Search package</td><td>pacman -Ss package_name</td></tr><tr><td>Install package</td><td>pacman -S package_name</td></tr><tr><td>Remove package and unused dependencies</td><td>pacman -Rs package_name</td></tr><tr><td>List installed packages</td><td>pacman -Qeq</td></tr><tr><td>Search installed package</td><td>pacman -Qs package_name</td></tr></tbody></table><ul><li>Always do <code>pacman -Syu</code> before you install packages<a id="more"></a><h2 id="Tips-and-notes"><a href="#Tips-and-notes" class="headerlink" title="Tips and notes"></a>Tips and notes</h2></li><li><a href="https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks</a></li></ul><h2 id="yy-v-s-y"><a href="#yy-v-s-y" class="headerlink" title="yy v.s. y"></a>yy v.s. y</h2><p>Passing two –refresh or -y flags will force a refresh of all package lists even if they appear to be up to date.</p><h3 id="Unknown-public-key"><a href="#Unknown-public-key" class="headerlink" title="Unknown public key"></a>Unknown public key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pacman -S libmng</div><div class="line">libmng-2.0.3.tar.xz ... FAILED (unknown public key F54984BFA16C640F)</div></pre></td></tr></table></figure><ul><li><code>gpg --recv-keys F54984BFA16C640F</code>.</li><li><a href="https://wiki.archlinux.org/index.php/Makepkg#Signature_checking" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Makepkg#Signature_checking</a></li></ul><h3 id="Signature-from-is-unknown-trust"><a href="#Signature-from-is-unknown-trust" class="headerlink" title="Signature from  is unknown trust"></a>Signature from <publisher> is unknown trust</publisher></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pacman-key --refresh-keys</div></pre></td></tr></table></figure><p>other possible fixes:</p><ol><li><p><a href="https://stackoverflow.com/a/35256655/3973896" target="_blank" rel="noopener">https://stackoverflow.com/a/35256655/3973896</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pacman -S archlinux-keyring</div><div class="line">pacman-key --populate</div><div class="line">pacman -Su</div></pre></td></tr></table></figure></li><li><p><a href="https://forum.antergos.com/post/46752" target="_blank" rel="noopener">https://forum.antergos.com/post/46752</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget https://git.archlinux.org/archlinux-keyring.git/snapshot/archlinux-keyring-20171213.tar.xz</div><div class="line">pacman -U antergos-keyring-20170524-1-any.pkg.tar.xz</div><div class="line">sudo pacman -Scc</div><div class="line">sudo pacman-key --refresh-keys</div><div class="line">sudo pacman -Syu</div></pre></td></tr></table></figure><ul><li>get the latest keyring at <a href="https://git.archlinux.org/archlinux-keyring.git/" target="_blank" rel="noopener">https://git.archlinux.org/archlinux-keyring.git/</a></li></ul></li><li><p>Disable packages that are blocking update</p><ul><li>For example, I was getting this error for pkgbuilder author’s key</li><li><p>Re-assign key also failed</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$  sudo pacman-key -r 5EAAEA16</div><div class="line">gpg: keyserver receive failed: No data</div><div class="line">==&gt; ERROR: Remote key not fetched correctly from keyserver.</div></pre></td></tr></table></figure></li><li><p>The kiyring is outdated but pacman upgrades are blocked by this key</p></li><li>The only workaround at this point is to disable upgrading pkgbuilder</li><li><p><code>sudo /etc/pacman.conf</code> , edit <code>IgnorePkg</code> to include pkgbuilder:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">IgnorePkg</span>   = fakeroot,pkgbuilder</div></pre></td></tr></table></figure></li><li><p>and comment out pkgbuilder repository:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> [pkgbuilder]</span></div><div class="line"><span class="meta">#</span><span class="bash"> Server = https://pkgbuilder-repo.chriswarrick.com/</span></div></pre></td></tr></table></figure></li><li><p>after the upgrade, revert pkgbuilder</p></li><li>then <code>sudo pacman-key --refresh-keys</code> should fix the issue<ul><li>or follow their <a href="https://github.com/Kwpolska/pkgbuilder" target="_blank" rel="noopener">README</a> to resign the key</li></ul></li></ul></li></ol><h3 id="The-requested-URL-returned-error-404"><a href="#The-requested-URL-returned-error-404" class="headerlink" title="The requested URL returned error: 404"></a>The requested URL returned error: 404</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">error: </span>failed retrieving file 'python2-requests<span class="string">-2</span>.18.4<span class="string">-4</span>-any.pkg.tar.xz' from mirrors.evowise.com : The requested URL returned error: 404</div><div class="line"><span class="keyword">error: </span>failed retrieving file 'python2-requests<span class="string">-2</span>.18.4<span class="string">-4</span>-any.pkg.tar.xz' from mirrors.kernel.org : The requested URL returned error: 404</div><div class="line"><span class="keyword">error: </span>failed retrieving file 'python2-requests<span class="string">-2</span>.18.4<span class="string">-4</span>-any.pkg.tar.xz' from mirrors.kernel.org : The requested URL returned error: 404</div><div class="line">warning: failed to retrieve some files</div><div class="line"><span class="keyword">error: </span>failed to commit transaction (unexpected error)</div><div class="line">Errors occurred, no packages were upgraded.</div></pre></td></tr></table></figure><p>This is usually happened because the local database is outdated, so pacman is not aware of new version and trying to pull a old version package (which is not available anymore). The <code>python2-requests</code> package, at the time of writing, is actually on <code>2.19.1-1</code>.</p><p>Do <code>pacman -Syu</code> or <code>pacman -Syyu</code> should fix the error.</p><p>If the problem exists, it could also be that the server mirror you’re using is outdated, try edit <code>/etc/pacman.d/mirrorlist</code> and disable (comment out) top servers:</p><ul><li>/etc/pacman.d/mirrorlist<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## Worldwide</span></div><div class="line">Server = http:<span class="regexp">//mi</span>rrors.evowise.com<span class="regexp">/archlinux/</span><span class="variable">$repo</span><span class="regexp">/os/</span><span class="variable">$arch</span></div><div class="line"><span class="comment">#Server = http://mirror.rackspace.com/archlinux/$repo/os/$arch</span></div></pre></td></tr></table></figure></li></ul><p>add <code>#</code> to comment out the first server and try again, for me it was the worldwide server that is outdated.</p><h3 id="lib32-packages"><a href="#lib32-packages" class="headerlink" title="lib32 packages"></a>lib32 packages</h3><ul><li>Required by some 32bit applications, or when you want to build 32bit applications from gcc.</li><li><strong>NOT RECOMMAND</strong> unless required by other packages, see below error note</li><li><p>uncomment the following in <code>/etc/pacman.conf</code>:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">[multilib]</span></div><div class="line"><span class="attr">Include</span> = /etc/pacman.d/mirrorlist</div></pre></td></tr></table></figure></li><li><p><code>gcc-multilib</code> packages will replace gcc packages when installed. (I don’t think they can coexist)</p></li></ul><h4 id="breaks-dependency-error-when-doing-pacman-installs"><a href="#breaks-dependency-error-when-doing-pacman-installs" class="headerlink" title="breaks dependency error when doing pacman installs"></a>breaks dependency error when doing pacman installs</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$  sudo pacman -Syu</div><div class="line">:: Synchronizing package databases...</div><div class="line">...</div><div class="line">error: failed to prepare transaction (could not satisfy dependencies)</div><div class="line">:: gcc-libs-multilib: installing lib32-gcc-libs (7.2.1-2) breaks dependency <span class="string">'lib32-gcc-libs=7.2.0-3'</span></div></pre></td></tr></table></figure><ul><li>At the time of writing, this is because gcc has upgraded to 7.2.1 while gcc-multilib is still on 7.2.0-3. Since I’m not using gcc-multilib anymore I just revert back to gcc by doing <code>pacman -S gcc</code></li><li><a href="https://forum.manjaro.org/t/cannot-apply-the-latest-update-due-to-dependency-conflict/25283/9" target="_blank" rel="noopener">https://forum.manjaro.org/t/cannot-apply-the-latest-update-due-to-dependency-conflict/25283/9</a></li></ul><h3 id="Cleanup"><a href="#Cleanup" class="headerlink" title="Cleanup"></a>Cleanup</h3><ul><li>Remove unused dependencies: <code>sudo pacman -Rns $(pacman -Qtdq)</code></li></ul><h3 id="3rd-party-AUR-package-manager"><a href="#3rd-party-AUR-package-manager" class="headerlink" title="3rd party AUR package manager"></a>3rd party AUR package manager</h3><ul><li><a href="https://github.com/Kwpolska/pkgbuilder" target="_blank" rel="noopener">pkgbuilder</a></li></ul><ol><li><p>add the following to <code>/etc/pacman.conf</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">[pkgbuilder]</span></div><div class="line"><span class="attr">Server</span> = https://pkgbuilder-repo.chriswarrick.com/</div></pre></td></tr></table></figure></li><li><p>Run</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pacman-key -r 5EAAEA16</div><div class="line">pacman-key --lsign 5EAAEA16</div><div class="line">pacman -Syyu pkgbuilder</div></pre></td></tr></table></figure></li><li><p>basically the usage is the same as <code>pacman</code>, for example <code>pkgbuilder -S package_name</code> and <code>pkgbuilder -Syu</code></p></li></ol><h3 id="Build-AUR-packages-manually"><a href="#Build-AUR-packages-manually" class="headerlink" title="Build AUR packages manually"></a>Build AUR packages manually</h3><p>You need to install <code>base-devel</code> package for building packages</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pkgbuilder -F &#123;package_name&#125;</div><div class="line">nvim PKGBUILD</div><div class="line">makepkg -sCLf</div><div class="line">sudo pacman -U *.pkg.tar.xz</div></pre></td></tr></table></figure><ul><li>For step 1, you can also download PKGBUILD file manually from AUR pages if you don’t want to use AUR package manager.</li><li>Use <code>makepkg -RdLf</code> for a “re-package”. Re-packaging is useful when the process failed in package() and you don’t want to run the long build part again.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Pacman notes&lt;/p&gt;
&lt;h2 id=&quot;Cheatsheet&quot;&gt;&lt;a href=&quot;#Cheatsheet&quot; class=&quot;headerlink&quot; title=&quot;Cheatsheet&quot;&gt;&lt;/a&gt;Cheatsheet&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Package upgrade&lt;/td&gt;
&lt;td&gt;pacman -Syu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sync package DB&lt;/td&gt;
&lt;td&gt;pacman -Sy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Search package&lt;/td&gt;
&lt;td&gt;pacman -Ss package_name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Install package&lt;/td&gt;
&lt;td&gt;pacman -S package_name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove package and unused dependencies&lt;/td&gt;
&lt;td&gt;pacman -Rs package_name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List installed packages&lt;/td&gt;
&lt;td&gt;pacman -Qeq&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Search installed package&lt;/td&gt;
&lt;td&gt;pacman -Qs package_name&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Always do &lt;code&gt;pacman -Syu&lt;/code&gt; before you install packages
    
    </summary>
    
    
      <category term="Archlinux" scheme="https://fsworld009.github.io/blog/tags/Archlinux/"/>
    
      <category term="linux" scheme="https://fsworld009.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Install Archlinux &amp; Xfce4 on VirtualBox</title>
    <link href="https://fsworld009.github.io/blog/2017/12/28/archlinux/"/>
    <id>https://fsworld009.github.io/blog/2017/12/28/archlinux/</id>
    <published>2017-12-28T02:53:52.000Z</published>
    <updated>2020-06-25T16:02:47.919Z</updated>
    
    <content type="html"><![CDATA[<p>Below are random notes I jotted down when I installed Archlinux and Xfce4 on VirtualBox. It has been a while so there might be errors here and there.</p><h2 id="Guest-System-configuration"><a href="#Guest-System-configuration" class="headerlink" title="Guest System configuration"></a>Guest System configuration</h2><ul><li>EFI enabled</li><li>GPT partition table for all disks</li><li>GRUB bootloader</li><li>Network setting: NAT</li></ul><a id="more"></a><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ul><li>Basically follow this guide <a href="https://wiki.archlinux.org/index.php/installation_guide" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/installation_guide</a>  </li><li>Article for VirtualBox: <a href="https://wiki.archlinux.org/index.php/VirtualBox" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/VirtualBox</a></li></ul><p>Notes for installation steps:</p><h3 id="Partition-the-disks"><a href="#Partition-the-disks" class="headerlink" title="Partition the disks"></a>Partition the disks</h3><ol><li>use <code>gdisk</code> to create GPT partition table for <code>/dev/sda/</code></li><li>create boot partition with <code>EF00</code> file system code</li><li><code>mkswap /dev/sdb</code> create swap partition (I created another virtual disk with GPT table for swap only)</li></ol><p><a href="https://wiki.archlinux.org/index.php/EFI_System_Partition#GPT_partitioned_disks" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/EFI_System_Partition#GPT_partitioned_disks</a><br><a href="https://wiki.archlinux.org/index.php/Swap#Swap_partition" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Swap#Swap_partition</a>  </p><h3 id="Boot-loader"><a href="#Boot-loader" class="headerlink" title="Boot loader"></a>Boot loader</h3><p>Install GRUB: <a href="https://wiki.archlinux.org/index.php/GRUB#Installation_2" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/GRUB#Installation_2</a></p><ol><li><code>grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub</code></li><li>create a script <code>/boot/startup.nsh</code> containing this line: <code>FS0:\EFI\grub\grubx64.efi</code><ul><li><a href="https://wiki.archlinux.org/index.php/VirtualBox#Installation_in_EFI_mode" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/VirtualBox#Installation_in_EFI_mode</a></li></ul></li></ol><h2 id="Activate-Numlock-on-boot"><a href="#Activate-Numlock-on-boot" class="headerlink" title="Activate Numlock on boot"></a>Activate Numlock on boot</h2><ul><li><a href="https://wiki.archlinux.org/index.php/Activating_Numlock_on_Bootup#Extending_getty.40.service" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Activating_Numlock_on_Bootup#Extending_getty.40.service</a></li><li><code>sudo systemctl edit getty\@.service</code><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">[Service]</span></div><div class="line"><span class="attr">ExecStartPre</span>=/bin/sh -c <span class="string">'setleds +num &lt; /dev/%I'</span></div></pre></td></tr></table></figure></li></ul><h2 id="Enable-internet-on-boot"><a href="#Enable-internet-on-boot" class="headerlink" title="Enable internet on boot"></a>Enable internet on boot</h2><ol><li><code>ping www.google.com</code></li><li>If no internet, run <code>systemctl enable dhcpcd@enp0s3.service</code> and reboot</li></ol><ul><li><a href="https://unix.stackexchange.com/questions/218084/no-internet-connection-for-new-installation" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/218084/no-internet-connection-for-new-installation</a></li></ul><h2 id="Create-main-user"><a href="#Create-main-user" class="headerlink" title="Create main user"></a>Create main user</h2><ul><li><a href="https://wiki.archlinux.org/index.php/users_and_groups" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/users_and_groups</a></li></ul><ol><li><code>useradd -m -G wheel -s /bin/bash fsworld009</code></li><li><code>passwd fsworld009</code></li><li>add user to other groups: <code>sudo gpasswd -a fsworld009 group_name</code></li><li>current group setup:<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> id fsworld009</span></div><div class="line">uid=1000(fsworld009) gid=1000(fsworld009) groups=1000(fsworld009),10(wheel),92(audio),109(vboxsf)</div></pre></td></tr></table></figure></li></ol><h2 id="Xfce4"><a href="#Xfce4" class="headerlink" title="Xfce4"></a>Xfce4</h2><ol><li>Install: <code>sudo pacman -S xorg xfce4 xfce4-goodies</code></li><li>start xfce4: <code>startxfce4</code></li></ol><ul><li>I didn’t make xfce4 run on boot, just feel like it is better to login to shell only by default</li></ul><p>Notes for xfce4 environment:</p><h3 id="Customize-startup-script"><a href="#Customize-startup-script" class="headerlink" title="Customize startup script"></a>Customize startup script</h3><p>~/.config/xfce4/xinitrc<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">export</span> <span class="attribute">GTK_IM_MODULE</span>=<span class="string">"fcitx"</span></div><div class="line"><span class="builtin-name">export</span> <span class="attribute">QT_IM_MODULE</span>=<span class="string">"fcitx"</span></div><div class="line"><span class="builtin-name">export</span> <span class="attribute">XMODIFIERS</span>=<span class="string">"@im=fcitx"</span></div><div class="line">imwheel</div><div class="line">source /etc/xdg/xfce4/xinitrc</div></pre></td></tr></table></figure></p><p>All configs need to be above the source call</p><h3 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h3><ol><li>add user to <code>audio</code> group:<br><code>sudo gpasswd -a fsworld009 audio</code></li><li>pulseaudio is required for Firefox audio output, so I use pulseaudio as audio core</li><li><code>sudo pacman -S alsa-utils pulseaudio</code></li><li>detailed explanation: <a href="https://askubuntu.com/a/427036/776335" target="_blank" rel="noopener">https://askubuntu.com/a/427036/776335</a></li></ol><h3 id="Change-default-app"><a href="#Change-default-app" class="headerlink" title="Change default app"></a>Change default app</h3><ul><li><a href="https://www.linuxquestions.org/questions/slackware-14/change-terminal-for-thunar-%27open-terminal-here%27-custom-action-924097/" target="_blank" rel="noopener">https://www.linuxquestions.org/questions/slackware-14/change-terminal-for-thunar-%27open-terminal-here%27-custom-action-924097/</a></li><li><code>exo-preferred-applications</code> or Applications -&gt; Settings -&gt; Preferred Applications</li></ul><h3 id="Change-mouse-scroll-speed"><a href="#Change-mouse-scroll-speed" class="headerlink" title="Change mouse scroll speed"></a>Change mouse scroll speed</h3><ul><li><a href="http://www.webupd8.org/2015/12/how-to-change-mouse-scroll-wheel-speed.html" target="_blank" rel="noopener">http://www.webupd8.org/2015/12/how-to-change-mouse-scroll-wheel-speed.html</a></li></ul><ol><li><code>sudo pacman -S imwheel</code></li><li>add <code>imwheel</code> to <code>~/.config/xfce4/xinitrc</code></li><li>create <code>~/.imwheelrc</code>:<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">".*"</span></div><div class="line"><span class="keyword">None</span>,      <span class="keyword">Up</span>,   Button4, <span class="number">6</span></div><div class="line"><span class="keyword">None</span>,      <span class="keyword">Down</span>, Button5, <span class="number">6</span></div></pre></td></tr></table></figure></li></ol><h3 id="Chinese-and-Japanese-Font"><a href="#Chinese-and-Japanese-Font" class="headerlink" title="Chinese and Japanese Font"></a>Chinese and Japanese Font</h3><ul><li>I use Google Noto fonts</li><li><code>sudo pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji</code></li></ul><h3 id="IME"><a href="#IME" class="headerlink" title="IME"></a>IME</h3><ul><li><code>gcin</code> does not work properly in many applications (like Google Chrome), so I installed <code>fcitx</code> instead</li><li><code>pacman -Syu fcitx-im</code> for installing fcitx &amp; GUI framework supports <strong>(required)</strong></li></ul><ol><li><code>fcitx-chewing</code> for Traditional Chinese, <code>fcitx-mozc</code> for Japanese</li><li>you need <code>fcitx-configtool</code> package in order to config IMEs</li><li>add the following to <code>~/.config/xfce4/xinitrc</code>:<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">export</span> <span class="attribute">GTK_IM_MODULE</span>=<span class="string">"fcitx"</span></div><div class="line"><span class="builtin-name">export</span> <span class="attribute">QT_IM_MODULE</span>=<span class="string">"fcitx"</span></div><div class="line"><span class="builtin-name">export</span> <span class="attribute">XMODIFIERS</span>=<span class="string">"@im=fcitx"</span></div></pre></td></tr></table></figure></li></ol><h3 id="Thunar-No-Suitable-Archive-Manager-found-error"><a href="#Thunar-No-Suitable-Archive-Manager-found-error" class="headerlink" title="Thunar No Suitable Archive Manager found error"></a>Thunar No Suitable Archive Manager found error</h3><ul><li><a href="https://bbs.archlinux.org/viewtopic.php?id=31871" target="_blank" rel="noopener">https://bbs.archlinux.org/viewtopic.php?id=31871</a></li></ul><h3 id="zip-archives"><a href="#zip-archives" class="headerlink" title="zip archives"></a>zip archives</h3><ul><li>use <code>peazip-gtk2</code></li></ul><h2 id="VirtualBox-related-topics"><a href="#VirtualBox-related-topics" class="headerlink" title="VirtualBox related topics"></a>VirtualBox related topics</h2><h3 id="Install-VirtualBox-Guest-addon"><a href="#Install-VirtualBox-Guest-addon" class="headerlink" title="Install VirtualBox Guest addon"></a>Install VirtualBox Guest addon</h3><ol><li><code>sudo pacman -S virtualbox-guest-utils</code></li><li>enable kernel module: <code>systemctl enable vboxservice.service</code></li><li>Xfce4 should automatically load guest services, if not then do <code>VBoxClient --clipboard --draganddrop --seamless --display --checkhostversion</code> or <code>VBoxClient-all</code></li></ol><ul><li><strong>DO NOT</strong> use hibernate from archlinux, use VirtualBox host’s save state feature instead. Otherwise guest addon will break on resume and it can only be fixed by full reboot.</li></ul><h3 id="Mount-shared-folder"><a href="#Mount-shared-folder" class="headerlink" title="Mount shared folder"></a>Mount shared folder</h3><ol><li>Users have to be in <code>vboxsf</code> group (created after installing <code>virtualbox-guest-utils</code>):<br><code>sudo gpasswd -a fsworld009 vboxsf</code></li><li><code>cd /;sudo mkdir shared</code></li><li>Manual mount:<br><code>mount -t vboxsf shared_folder_name mount_point_on_guest_system</code></li><li>Mount in fstab:<br><code>shared /shared/ vboxsf  uid=1000,gid=1000,rw,dmode=700,fmode=600,noauto,x-systemd.automount</code></li></ol><ul><li><a href="https://blog.gtwang.org/tips/virtualbox-shared-folder/" target="_blank" rel="noopener">https://blog.gtwang.org/tips/virtualbox-shared-folder/</a></li><li><a href="https://wiki.archlinux.org/index.php/VirtualBox#Enable_shared_folders" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/VirtualBox#Enable_shared_folders</a></li></ul><h2 id="Mount-other-disks-in-fstab"><a href="#Mount-other-disks-in-fstab" class="headerlink" title="Mount other disks in fstab"></a>Mount other disks in fstab</h2><ul><li><a href="https://wiki.archlinux.org/index.php/fstab" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/fstab</a></li></ul><ol><li>Run <code>lsblk -f</code> to get UUIDs</li><li>edit <code>/etc/fstab</code><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># /dev/sdc1</span></div><div class="line"><span class="attribute">UUID</span>=enter_uid_here       mount_point      ext4    defaults,nofail,x-systemd.<span class="attribute">device-timeout</span>=1      0       2</div></pre></td></tr></table></figure></li></ol><ul><li>all options: <a href="https://help.ubuntu.com/community/Fstab#Options" target="_blank" rel="noopener">https://help.ubuntu.com/community/Fstab#Options</a></li></ul><h2 id="SSH-server"><a href="#SSH-server" class="headerlink" title="SSH server"></a>SSH server</h2><ul><li>Run a ssh server so that host machine can connect via SSH.</li></ul><ol><li>setup port forwarding in VM setting (Network -&gt; Advanced): for example TCP, host 2222 to guest 22</li><li><code>sudo pacman -S openssh</code></li><li><p>enable the following options in <code>/etc/ssh/sshd_config</code>:</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ListenAddress <span class="number">0.0</span>.<span class="number">0.0</span></div><div class="line">Protocol <span class="number">2</span></div><div class="line">PermitRootLogin no</div><div class="line">ChallengeResponseAuthentication no</div><div class="line">UsePAM yes</div><div class="line">Subsystem sftp /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">ssh</span>/<span class="title">sftp</span>-<span class="title">server</span></span></div></pre></td></tr></table></figure></li><li><p>add <code>sshd:ALL</code> to <code>/etc/hosts.allow</code></p></li><li><code>sudo systemctrl start sshd.socket</code>, I created another user to authorize the service, not sure if this is required.</li><li>check sshd log: <code>journalctl /usr/bin/sshd</code></li><li>test ssh server locally: <code>ssh fsworld009@0.0.0.0:22</code><ul><li>If you don’t have ssh keys yet you need to generate one, refer to GitHub guides: <a href="https://help.github.com/articles/checking-for-existing-ssh-keys/" target="_blank" rel="noopener">Check fot existing SSH keys</a>, <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="noopener">Generating a new SSH key and adding it to the ssh-agent</a></li></ul></li><li>Ssh from host machine: <code>ssh 0.0.0.0 -p 2222</code></li></ol><ul><li>Other refs: <a href="http://smalldd.pixnet.net/blog/post/24627330-arch-linux-%E5%AE%89%E8%A3%9D-openssh" target="_blank" rel="noopener">http://smalldd.pixnet.net/blog/post/24627330-arch-linux-%E5%AE%89%E8%A3%9D-openssh</a> (Traditional Chinese)</li></ul><h2 id="Xorg-over-SSH"><a href="#Xorg-over-SSH" class="headerlink" title="Xorg over SSH"></a>Xorg over SSH</h2><p><strong>NOT RECOMMEND</strong> as the performance is generally worse and there are many UI bugs when running over SSH</p><ul><li><p>In SSH sessions, run GUI applications with <code>&amp;</code> at the end to start the application in another process, for example: <code>firefox &amp;</code></p></li><li><p>enable the following settings in <code>/etc/ssh/sshd_config</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">X11Forwarding</span> <span class="literal">yes</span></div><div class="line"><span class="string">X11DisplayOffset</span> <span class="number">10</span></div><div class="line"><span class="string">X11UseLocalhost</span> <span class="literal">yes</span></div></pre></td></tr></table></figure></li></ul><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ol><li>You need a X Server such as <code>VcXsrv</code></li><li>Use <code>putty</code> to connect to the guest machine, with the following setting enabled:<ul><li>Connection -&gt; SSH -&gt; X11 -&gt; Enable X11 forwarding</li><li>X display location: <code>localhost:0</code></li></ul></li><li>If <code>$DISPLAY = localhost:10.0</code> after you login via ssh, then you are all set.<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">  <span class="built_in">echo</span> <span class="variable">$DISPLAY</span></span></div><div class="line">localhost:10.0</div></pre></td></tr></table></figure></li></ol><ul><li>Other notes:<ul><li>If you want to use ssh from msys2 or Bash on Windows in windows 10, refer to below. (I believe you still need to run VcXsrv as X Server)</li><li>The change IME short cut for <code>fcitx</code> may conflict with Windows host</li></ul></li></ul><h3 id="Unix-based-OS-not-tested"><a href="#Unix-based-OS-not-tested" class="headerlink" title="Unix based OS (not tested )"></a>Unix based OS (not tested )</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> DISPLAY=0.0.0.0:0</div><div class="line">ssh -X fsworld009@0.0.0.0 -p 2222</div><div class="line">firefox &amp;</div></pre></td></tr></table></figure><ul><li><a href="http://cypresslin.web.fc2.com/Memo/M-SSH.html" target="_blank" rel="noopener">http://cypresslin.web.fc2.com/Memo/M-SSH.html</a></li><li><a href="https://askubuntu.com/questions/432255/what-is-display-environment-variable" target="_blank" rel="noopener">https://askubuntu.com/questions/432255/what-is-display-environment-variable</a></li></ul><h2 id="Pacman-and-AUR-packages"><a href="#Pacman-and-AUR-packages" class="headerlink" title="Pacman and AUR packages"></a>Pacman and AUR packages</h2><p>Refer to my <a href="../../29/pacman/">other article</a>.</p><h2 id="Enable-Hibernate"><a href="#Enable-Hibernate" class="headerlink" title="Enable Hibernate"></a>Enable Hibernate</h2><p><strong>DO NOT USE</strong> systemd hibernate when running as a VM guest, use VirtualBox host’s save state feature instead. Otherwise guest addon will break on resume and it can only be fixed by full reboot.</p><ol><li><p>Edit <code>/etc/default/grub</code>: add resume kernel parameter</p><ul><li>have seen many reports on /dev/sdx not working, but I didn’t try.<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">GRUB_CMDLINE_LINUX_DEFAULT</span>=<span class="string">"quiet resume=UUID=swap_uuid"</span></div></pre></td></tr></table></figure></li></ul></li><li><p><code>grub-mkconfig -o /boot/grub/grub.cfg</code></p></li><li><p>Edit <code>/etc/mkinitcpio.conf</code>: add <code>resume</code> to HOOKS option</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">HOOKS</span>=(<span class="keyword">base </span>udev autodetect modconf <span class="keyword">block </span>filesystems keyboard fsck resume)</div></pre></td></tr></table></figure></li><li><p><code>sudo mkinitcpio -p linux</code></p></li><li><code>xfce4-power-manager-settings</code>: change sleep mode to hibernate</li></ol><p>Other refs:</p><ul><li><a href="https://wiki.archlinux.org/index.php/kernel_parameters" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/kernel_parameters</a></li><li><a href="https://wiki.archlinux.org/index.php/Power_management#Sleep_hooks" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Power_management#Sleep_hooks</a></li><li><a href="https://wiki.archlinux.org/index.php/Power_management/Suspend_and_hibernate#Configure_the_initramfs" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Power_management/Suspend_and_hibernate#Configure_the_initramfs</a></li><li><a href="https://wiki.archlinux.org/index.php/System_maintenance" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/System_maintenance</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Below are random notes I jotted down when I installed Archlinux and Xfce4 on VirtualBox. It has been a while so there might be errors here and there.&lt;/p&gt;
&lt;h2 id=&quot;Guest-System-configuration&quot;&gt;&lt;a href=&quot;#Guest-System-configuration&quot; class=&quot;headerlink&quot; title=&quot;Guest System configuration&quot;&gt;&lt;/a&gt;Guest System configuration&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;EFI enabled&lt;/li&gt;
&lt;li&gt;GPT partition table for all disks&lt;/li&gt;
&lt;li&gt;GRUB bootloader&lt;/li&gt;
&lt;li&gt;Network setting: NAT&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Archlinux" scheme="https://fsworld009.github.io/blog/tags/Archlinux/"/>
    
      <category term="Linux" scheme="https://fsworld009.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Back</title>
    <link href="https://fsworld009.github.io/blog/2017/11/14/back-2017/"/>
    <id>https://fsworld009.github.io/blog/2017/11/14/back-2017/</id>
    <published>2017-11-14T07:49:39.000Z</published>
    <updated>2020-06-25T16:02:47.931Z</updated>
    
    <content type="html"><![CDATA[<p>My life had been busy from Aug 2016 to Aug 2017.<br><a id="more"></a></p><p>Moved back to Taiwan in early 2017, then started the work with less than 2 weeks, then got really busy in my full time job, eventually I left the position.</p><p>I didn’t get any time to do any side project during this period. Now  that I don’t need to rush to land my next job at this time, I decided to take a long break and do whatever I’ve been thinking doing. Although the pace is rather slow right now…</p><p>Anyway, I have installed Arch Linux in Virtual Box on my Windows 10 PC, and I managed to rewrite my <a href="https://fsworld009.github,io/" target="_blank" rel="noopener">portfolio website</a> in Vue.js with VS Code. So far I am satisfied with all the hard work. Hopefully I can do more stuff during this break.</p><p>Since I moved back to Taiwan I will stop limiting myself only write blog posts in English, hope this will get me more motivated to write something down.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My life had been busy from Aug 2016 to Aug 2017.&lt;br&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://fsworld009.github.io/blog/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Thoughts on today&#39;s javascript world</title>
    <link href="https://fsworld009.github.io/blog/2016/10/03/javascript-world/"/>
    <id>https://fsworld009.github.io/blog/2016/10/03/javascript-world/</id>
    <published>2016-10-03T14:43:17.000Z</published>
    <updated>2020-06-25T17:02:49.697Z</updated>
    
    <content type="html"><![CDATA[<p>Two years after becoming a Front-End developer, and spending some of my free times learning node.js and some javasciript packages, all I can say to javascript is:</p><h2 id="There-are-too-many-f-king-thing-you-need-to-learn"><a href="#There-are-too-many-f-king-thing-you-need-to-learn" class="headerlink" title="There are too many f**king thing you need to learn"></a>There are too many f**king thing you need to learn</h2><p>Yeah, HTML/CSS/javascript is just the very basic, but those could already be the pain for some people. Nowadays nobody works on pure javascript, at least we need jQuery. But jQuery is not good when your code base starts to grow. So there is endless frameworks for webpage, such as Ember.js, AngularJS, Vue.js, React….so many different things you can choose/learn.</p><p>Node.js and npm is another beast. Node.js gives developers to run javascript in machines directly without browser, and with full system access like python and C++. Hence, a lot of packages for developing Front-End javascript are developed in Node.js and distributed via npm.<br>I would suggest new comers to learn these things in the following order:</p><h3 id="1-HTML-CSS"><a href="#1-HTML-CSS" class="headerlink" title="1. HTML/CSS"></a>1. HTML/CSS</h3><p>The most basic stuff for web pages.</p><h3 id="2-Browser-javascript"><a href="#2-Browser-javascript" class="headerlink" title="2. Browser javascript"></a>2. Browser javascript</h3><p>This is the basic for the rest of the javascript world.</p><h3 id="3-jQuery"><a href="#3-jQuery" class="headerlink" title="3. jQuery"></a>3. jQuery</h3><p>Pure javascript can be tricky sometimes, and browser compatibility is a nightmare. <a href="https://jquery.com/" target="_blank" rel="noopener">jQuery</a> solves most. It has been around since 2006 so there are tones of jQUery plugins out there. Hence today it is still difficult to not use jQuery completely.<br>You should keep the use of jQuery in the minimal way. DOM manipulation is very convenient in jQuery, but it is very easy to be abused and create codes that is very difficult to trace and mantain, so use it wisely.<br>Personally, for new projects I try to use jQuery only for AJAX calls, and maybe some jQuery plugins that I cannot find any good alternative.</p><h3 id="4-lodash"><a href="#4-lodash" class="headerlink" title="4. lodash"></a>4. lodash</h3><p><a href="https://lodash.com/" target="_blank" rel="noopener">lodash</a> is a collection of utilities like sorting, map array to another array based on a function (map), or transform a list of objects to a object map (keyBy). Another similar package is <a href="http://underscorejs.org/" target="_blank" rel="noopener">underscore.js</a> I found these packages are extremely helpful in my project, so I would definitely recommend you to learn them. Note that you only need one of them in your project.</p><h3 id="5-Node-js-and-npm"><a href="#5-Node-js-and-npm" class="headerlink" title="5. Node.js and npm"></a>5. Node.js and npm</h3><p><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> is basically javascript for Back-End, but it is not just designed for web development, you can create regular programs too. <a href="https://www.npmjs.com" target="_blank" rel="noopener">npm</a> is the package manager for Node.js. Even if you only want to be a Front-End developer, you should at least learn how to run node.js codes and how to use npm, so that you can install dependencies for your Front-End project.</p><p>But I would really recommend learn to code Node.js programs. It’s still javascript, and this is the shortcut for you to jump into Back-End development. Or even better, there is <a href="http://electron.atom.io/" target="_blank" rel="noopener">Electron</a>, where you can write desktop applications in javascript. There is <a href="https://www.nativescript.org/" target="_blank" rel="noopener">NativeScript</a>, where you can write native Android/iOS apps in javascript.</p><h3 id="6-Whatever-you-need-for-your-project"><a href="#6-Whatever-you-need-for-your-project" class="headerlink" title="6. Whatever you need for your project"></a>6. Whatever you need for your project</h3><p>At this point you should have the ability to learn most of the packages/frameworks in javascript world.<br>Keep in mind that since there are so many packages/frameworks out there today, it is impossible to learn them all. So when you see a new framework, only focus on “What” it does, “What” are the features, “What” are the problems it trying to solve. If you think your project can benefit from that package, only then you start to learn “How” to use it. This approach will save your time and prevent you from being overwhelmed by endless new stuffs.</p><p>I have been trying to figure out what is my favorite programming language since I graduated from college. I would say for now I love javascript the most The reason? Because you can just learn one language to develop everything for nearly every modern platform.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Two years after becoming a Front-End developer, and spending some of my free times learning node.js and some javasciript packages, all I 
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://fsworld009.github.io/blog/tags/Front-End/"/>
    
      <category term="javascript" scheme="https://fsworld009.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Install Semantic UI into your project</title>
    <link href="https://fsworld009.github.io/blog/2016/03/27/semantic-ui-install/"/>
    <id>https://fsworld009.github.io/blog/2016/03/27/semantic-ui-install/</id>
    <published>2016-03-27T08:47:58.000Z</published>
    <updated>2020-06-25T16:02:48.038Z</updated>
    
    <content type="html"><![CDATA[<p><strong>OUTDATED</strong><br><a id="more"></a><br><a href="http://semantic-ui.com/introduction/getting-started.html" target="_blank" rel="noopener">Official guide</a> is pretty clear. I just make some notes here mainly for references later.</p><ol><li><p>install gulp</p><blockquote><p>install gulp -g</p></blockquote></li><li><p>install semantic-ui as dev-dependencies</p><blockquote><p>install semantic-ui –save-dev</p></blockquote></li><li><p>config screen will popup automatically, I would suggest leave all path as default and include all components</p></li><li><p>go to (project_root)/semantic/src/theme.config to configure themes.</p><ul><li>Note that most themes don’t have icons and images. For example, change everything to “material”, but leave @icon and @image as “default”.</li></ul></li><li><p>go to semantic folder and run</p><blockquote><p>gulp build</p></blockquote><ul><li>output file will be under dist folder</li></ul></li><li><p>copy semantic.css, semantic.js, themes/default/assets to the folder you want to store css, keep the same relative path for semantic.css and assets folder.</p><ul><li>If you’re using icon and images from different themes, copy those assets also</li></ul></li><li><p>you should gitignore the dist folder</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;OUTDATED&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Front-End" scheme="https://fsworld009.github.io/blog/tags/Front-End/"/>
    
      <category term="javascript" scheme="https://fsworld009.github.io/blog/tags/javascript/"/>
    
      <category term="semantic-ui" scheme="https://fsworld009.github.io/blog/tags/semantic-ui/"/>
    
      <category term="css" scheme="https://fsworld009.github.io/blog/tags/css/"/>
    
      <category term="npm" scheme="https://fsworld009.github.io/blog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://fsworld009.github.io/blog/2016/03/27/webpack/"/>
    <id>https://fsworld009.github.io/blog/2016/03/27/webpack/</id>
    <published>2016-03-27T06:50:37.000Z</published>
    <updated>2020-06-25T16:02:48.074Z</updated>
    
    <content type="html"><![CDATA[<p><strong>OUTDATED</strong><br><a id="more"></a></p><h2 id="Caution-this-article-is-outdated-and-has-too-much-misinformation"><a href="#Caution-this-article-is-outdated-and-has-too-much-misinformation" class="headerlink" title="Caution: this article is outdated and has too much misinformation."></a>Caution: this article is outdated and has too much misinformation.</h2><p><a href="https://webpack.github.io/" target="_blank" rel="noopener">webpack</a> is a module bundler for Froned-end web development. It aims to provide a way to automate resources including, minifying, and uglifying so that you don’t need to manually insert them in your HTML.</p><p>There are other packages doing front-end resource packaging or load handling, such as require.js, bower, browserify. I don’t have much experience on these packages so I’m not going to do any compare&amp;comparison here. I chose webpack simply because it looks like the JS community is in favor of webpack at this point.</p><h2 id="Pros-and-cons"><a href="#Pros-and-cons" class="headerlink" title="Pros and cons"></a>Pros and cons</h2><p>Some advantages I can see after I tried webpack:</p><ul><li>You only need to include the bundle script in the html, no need to keep adding script and link tags</li><li>Be able to use require(“”) in browser javascript, separating modules and reduce the use of global variables</li><li>You can require packages from node_modules like you do in Node.js code, there are some advantages of doing this:<ul><li>You can share common-used libs (like jQuery, underscore) between Front-end and Back-end code</li><li>Update Front-end dependencies directly by npm, you don’t need to replace resources manually anymore</li></ul></li></ul><p>As of cons, I haven’t really do heavy developments so I cannot tell mush, I can only think of two now:</p><ul><li>It’s not easy to make webpack work in the beginning, it took me almost 2 days to bundle a Hello World app with React and Semantic UI.</li><li>You need run webpack every time you update something in your code, this can be solved by using <a href="https://webpack.github.io/docs/webpack-dev-server.html" target="_blank" rel="noopener">webpack-dev-server</a> package, but again it is another pain to set it up properly. I’ll briefly talk about it at the end of the article</li></ul><p>I’m not an export on it so in this article I’ll only show my working config and some key points.</p><p>The webpack version is 1.12.14 by the time I wrote this article.</p><h2 id="Example-script"><a href="#Example-script" class="headerlink" title="Example script"></a>Example script</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">"./css/semantic.css"</span>);</div><div class="line"></div><div class="line"><span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = <span class="built_in">require</span>(<span class="string">"jquery"</span>);</div><div class="line"><span class="keyword">var</span> semantic = <span class="built_in">require</span>(<span class="string">"./js/semantic.js"</span>);</div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">"react"</span>);</div><div class="line"><span class="keyword">var</span> ReactDOM = <span class="built_in">require</span>(<span class="string">"react-dom"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> HelloWorld = React.createClass(&#123;</div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;p&gt;</div><div class="line">        Hello, &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"Your name here"</span> /&gt;!</div><div class="line">        It is &#123;<span class="keyword">this</span>.props.date.toTimeString()&#125;</div><div class="line">      &lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">    );</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">setInterval(function() &#123;</span></div><div class="line"><span class="regexp">  ReactDOM.render(</span></div><div class="line"><span class="regexp">    &lt;HelloWorld date=&#123;new Date()&#125; /</span>&gt;,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</div><div class="line">  );</div><div class="line">&#125;, <span class="number">500</span>);</div></pre></td></tr></table></figure><p>Here, I require jQuery and react from node_modules. For jQuery, I need to use window object because of the semantic ui scripts.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><blockquote><p>npm install webpack –save-dev</p></blockquote><p>Make sure you save it as dev dependencies only. I would suggest install it globally also, if this is your first time using it.</p><blockquote><p>npm install webpack -g</p></blockquote><p>The reason is that you can test it without “npm run” commands. just type ‘webpack’ in bash and kick of the bundle process.</p><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>Take this config file for example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> config = &#123;</div><div class="line">    entry: <span class="string">'./web/index.jsx'</span>,</div><div class="line">    output: &#123;</div><div class="line">        path: path.resolve(__dirname, <span class="string">'web/build/'</span>),</div><div class="line">        publicPath: <span class="string">"./build/"</span>,</div><div class="line">        filename: <span class="string">'bundle.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        loaders: [</div><div class="line">              &#123;</div><div class="line">                test: <span class="regexp">/\.jsx$/</span>,</div><div class="line">                loader: <span class="string">'babel-loader'</span>,</div><div class="line">                query: &#123;</div><div class="line">                  presets: [<span class="string">'babel-preset-react'</span>]</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.json$/</span>, <span class="attr">loader</span>: <span class="string">"json-loader"</span> &#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">'style-loader!css-loader'</span> &#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>, <span class="attr">loader</span>: <span class="string">'url-loader?limit=8192'</span> &#125;, <span class="comment">// inline base64 URLs for &lt;=8k images, direct URLs for the rest</span></div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.woff(2)?$/</span>,   <span class="attr">loader</span>: <span class="string">"url-loader?prefix=font/&amp;limit=5000"</span> &#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.(eot|ttf|svg)$/</span>,    <span class="attr">loader</span>: <span class="string">"file-loader?prefix=font/"</span> &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports=config;</div></pre></td></tr></table></figure><p>my project folder structure:</p><ul><li>root<ul><li>web<ul><li>build<ul><li>(bundle.js goes here)</li></ul></li><li>index.html</li><li>index.jsx</li></ul></li></ul></li></ul><h2 id="Key-points"><a href="#Key-points" class="headerlink" title="Key points"></a>Key points</h2><ul><li>By default the config file is at webpack.config.js in your project root.</li><li><strong>It seems that there is no type checking when paring config files</strong>, so make sure you’re passing lists when you should, or else you’ll end up getting errors from webpack dependencies and stuck for a few hours <a href="https://github.com/webpack/webpack/issues/2242" target="_blank" rel="noopener">like me</a></li><li><p>entry property specifies the main script file to pack, I’m doing a single page app now so there is only one file. For multiple entry points, check <a href="https://webpack.github.io/docs/multiple-entry-points.html" target="_blank" rel="noopener">this article</a></p></li><li><p>publicPath means “the relative path from index.jsx to the output file”, it is used when you’re bundling any files other than css/js (like fonts and sprites)</p></li><li><p>You need to specify loaders to deal with each type of resource files.<br>I construct the loaders mainly from this <a href="https://github.com/webpack/example-app/blob/master/webpack.config.js" target="_blank" rel="noopener">webpack-example repo</a> and <a href="https://github.com/petehunt/webpack-howto" target="_blank" rel="noopener">this howto repo</a></p></li><li>For react JSX files (*.jsx), you need to use loader “babel-loader” and preset “babel-preset-react” to handle JSX syntax.</li><li><strong>Make sure you installed all loaders and presets in your config</strong>, for the example above, I need to npm install these packages as dev-dependencies:<ul><li><blockquote><p>npm install babel-loader babel-preset-react style-loader css-loader url-loader file-loader —save-dev</p></blockquote></li></ul></li></ul><h2 id="Bundle"><a href="#Bundle" class="headerlink" title="Bundle"></a>Bundle</h2><p>run</p><blockquote><p>webpack</p></blockquote><p>or</p><blockquote><p>webpack –config webpack.dev-pack.config.js</p></blockquote><p>if you want to specify which file you want to use</p><p>Now the only script you need to insert into the index.html is the bundle.js files<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./build/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>webpack-dev-server gives you a http server that watches changes and do bundle tasks automatically. You should only use it for dev purposes.</p><p>Install it from npm:</p><blockquote><p>npm install webpack-dev-server –save-dev</p></blockquote><p>Or globally</p><blockquote><p>npm install webpack-dev-server -g</p></blockquote><p>In order to work with webpack-dev-server, I changed my config as folows:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> config = &#123;</div><div class="line">    entry: [<span class="string">'webpack/hot/dev-server'</span>, path.resolve(__dirname, <span class="string">'web/index.jsx'</span>)],</div><div class="line">    output: &#123;</div><div class="line">        path: path.resolve(__dirname, <span class="string">'web/build/'</span>),</div><div class="line">        publicPath: <span class="string">"/web/build/"</span>,</div><div class="line">        filename: <span class="string">'bundle.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        loaders: [</div><div class="line">              &#123;</div><div class="line">                test: <span class="regexp">/\.jsx$/</span>,</div><div class="line">                loader: <span class="string">'babel-loader'</span>,</div><div class="line">                query: &#123;</div><div class="line">                  presets: [<span class="string">'babel-preset-react'</span>]</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.json$/</span>, <span class="attr">loader</span>: <span class="string">"json-loader"</span> &#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">'style-loader!css-loader'</span> &#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>, <span class="attr">loader</span>: <span class="string">'url-loader?limit=8192'</span> &#125;, <span class="comment">// inline base64 URLs for &lt;=8k images, direct URLs for the rest</span></div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.woff(2)?$/</span>,   <span class="attr">loader</span>: <span class="string">"url-loader?prefix=font/&amp;limit=5000"</span> &#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.(eot|ttf|svg)$/</span>,    <span class="attr">loader</span>: <span class="string">"file-loader?prefix=font/"</span> &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    plugins: [</div><div class="line">      <span class="keyword">new</span> webpack.NoErrorsPlugin()</div><div class="line">    ]</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports=config;</div></pre></td></tr></table></figure></p><p>Key Differences:</p><ul><li>add “webpack/hot/dev-server” in entry</li><li>publicPath needs to be “absolute path with your project home as root”</li><li>(optional) add webpack.NoErrorsPlugin() to stop hot reloading when the script has error</li></ul><p>Now run dev-server</p><blockquote><p>webpack-dev-server –config webpack.dev-server.config.js –devtool eval –progress –colors –hot</p></blockquote><p>Then go to <a href="http://localhost:8080/webpack-dev-server/web/" target="_blank" rel="noopener">http://localhost:8080/webpack-dev-server/web/</a> to see the page. Make some changes on jsx and save, you should see hot reloading happens. Saving HTML page doesn’t trigger a hot reload, I guess it only watches files listed in “entry” property.</p><p>check all availables options at <a href="https://webpack.github.io/docs/webpack-dev-server.html#webpack-dev-server-cli" target="_blank" rel="noopener">webpack-dev-server</a></p><p>Finally, if you don’t want to install webpack and webpack-dev-server globally, you need to put the config in package.json:</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  "scripts": &#123;</div><div class="line">    "dev-pack": "webpack --config webpack.dev-pack.config.js",</div><div class="line">    "dev-server": "webpack-dev-server --config webpack.dev-server.config.js --devtool eval --progress --colors --hot"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>and do</p><blockquote><p>num run dev-pack<br>num run dev-server</p></blockquote><p>respectively</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="http://rhadow.github.io/2015/04/02/webpack-workflow/" target="_blank" rel="noopener">http://rhadow.github.io/2015/04/02/webpack-workflow/</a><br><a href="http://survivejs.com/webpack_react/developing_with_webpack/" target="_blank" rel="noopener">http://survivejs.com/webpack_react/developing_with_webpack/</a><br><a href="http://www.christianalfoni.com/articles/2015_04_19_The-ultimate-webpack-setup" target="_blank" rel="noopener">http://www.christianalfoni.com/articles/2015_04_19_The-ultimate-webpack-setup</a><br><a href="https://github.com/dmachat/angular-webpack-cookbook/wiki/Deploy-to-production" target="_blank" rel="noopener">https://github.com/dmachat/angular-webpack-cookbook/wiki/Deploy-to-production</a><br><a href="https://github.com/petehunt/webpack-howto" target="_blank" rel="noopener">https://github.com/petehunt/webpack-howto</a><br><a href="http://blog.kkbruce.net/2015/10/webpack.html#.Vvfymj-rii4" target="_blank" rel="noopener">http://blog.kkbruce.net/2015/10/webpack.html#.Vvfymj-rii4</a><br><a href="https://github.com/webpack/example-app/blob/master/webpack.config.js" target="_blank" rel="noopener">https://github.com/webpack/example-app/blob/master/webpack.config.js</a></p><p><a href="http://stackoverflow.com/questions/34538466/error-cannot-resolve-module-babel-loader" target="_blank" rel="noopener">Error: Cannot resolve module ‘babel-loader’</a><br><a href="http://stackoverflow.com/questions/34574403/how-to-set-resolve-for-babel-loader-presets" target="_blank" rel="noopener">How to set resolve for babel-loader presets</a><br><a href="https://github.com/petehunt/webpack-howto/issues/30" target="_blank" rel="noopener">Module not found: Error: Cannot resolve module” for react-router and react</a><br><a href="http://stackoverflow.com/questions/28969861/managing-jquery-plugin-dependency-in-webpack" target="_blank" rel="noopener">Managing Jquery plugin dependency in webpack</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;OUTDATED&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Front-End" scheme="https://fsworld009.github.io/blog/tags/Front-End/"/>
    
      <category term="javascript" scheme="https://fsworld009.github.io/blog/tags/javascript/"/>
    
      <category term="npm" scheme="https://fsworld009.github.io/blog/tags/npm/"/>
    
      <category term="webpack" scheme="https://fsworld009.github.io/blog/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Mac</title>
    <link href="https://fsworld009.github.io/blog/2016/03/26/mac/"/>
    <id>https://fsworld009.github.io/blog/2016/03/26/mac/</id>
    <published>2016-03-26T04:02:32.000Z</published>
    <updated>2020-06-25T16:02:47.976Z</updated>
    
    <content type="html"><![CDATA[<p>I bought a Macbook last November because I want to have a machine solely for programming and works, Windows is mainly for video games purposes for me.<br>I’ve been using Mac for a couple of months, I think it got the best worlds from both Windows and Linux:</p><ul><li>A good GUI</li><li>No need to worry about hardware driver issues (For me this is the main reason why I gave up installing Linux on my laptop)</li><li>Unix based bash tools</li><li>I’m more comfortable to mess around $PATH and install programs globally, compare to Windows</li><li>single OS &amp; Hardware environment makes me easier to Google my questions</li></ul><p>Of course it’s not perfect, there aren’t many choices in terms of accessories, you pretty much need to stick with Apple branded stuffs and they are just expensive.<br>And regular mouses just don’t work well with Mac OSX.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I bought a Macbook last November because I want to have a machine solely for programming and works, Windows is mainly for video games pur
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://fsworld009.github.io/blog/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Hexo workflow</title>
    <link href="https://fsworld009.github.io/blog/2015/07/19/hexo-workflow/"/>
    <id>https://fsworld009.github.io/blog/2015/07/19/hexo-workflow/</id>
    <published>2015-07-19T09:20:22.000Z</published>
    <updated>2020-06-25T16:02:47.943Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Start-local-server"><a href="#Start-local-server" class="headerlink" title="Start local server"></a>Start local server</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo server</div><div class="line">hexo<span class="built_in"> server </span>-p (port)</div></pre></td></tr></table></figure><p>It will listen to any local change and do hexo generate automatically behind the scene.<br>One issue with this automatically update approach is that deleted tags doesn’t remove from tag list, but this can be solved<br>by close server, then doing manual page generation (hexo generate)</p><h3 id="Create-new-post"><a href="#Create-new-post" class="headerlink" title="Create new post"></a>Create new post</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="type"></span>(post-name)</div></pre></td></tr></table></figure><h3 id="Create-new-page"><a href="#Create-new-page" class="headerlink" title="Create new page"></a>Create new page</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new<span class="built_in"> page </span>(page-name)</div></pre></td></tr></table></figure><p>url is (blog-index)/(page-name)</p><h3 id="Deploy-changes-to-actual-server"><a href="#Deploy-changes-to-actual-server" class="headerlink" title="Deploy changes to actual server"></a>Deploy changes to actual server</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span></div><div class="line">hexo deploy</div></pre></td></tr></table></figure><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul><li>Built-in tags <a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="noopener">https://hexo.io/docs/tag-plugins.html</a></li></ul><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><ul><li>You can force hexo to regenerate all pages by deleting <code>public</code> folder and then do <code>hexo generate</code>, useful for issues like title is not updated in article list pages.</li><li>For using git as deployment method, deleting <code>.deploy_git</code> folder and then do deployment will result a force update on target server/branch, might be useful if you don’t want to preserve older versions of articles and pages.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Start-local-server&quot;&gt;&lt;a href=&quot;#Start-local-server&quot; class=&quot;headerlink&quot; title=&quot;Start local server&quot;&gt;&lt;/a&gt;Start local server&lt;/h3&gt;&lt;figure c
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://fsworld009.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Apache httpd SSL Configuration</title>
    <link href="https://fsworld009.github.io/blog/2015/07/19/apache-ssl-config/"/>
    <id>https://fsworld009.github.io/blog/2015/07/19/apache-ssl-config/</id>
    <published>2015-07-19T08:23:05.000Z</published>
    <updated>2020-06-25T16:02:47.899Z</updated>
    
    <content type="html"><![CDATA[<p>My company’s client is going to do penetration test on our product, I was assigned to configure Apache server, mainly enhance SSL Cipher settings.<br>Below are some notes on SSL configurations for Apache httpd.</p><h1 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h1><p>Learn SSL Basics at <a href="http://www.wisegeek.com/what-is-an-ssl-cipher.htm" target="_blank" rel="noopener">http://www.wisegeek.com/what-is-an-ssl-cipher.htm</a></p><p>Basically we need to configure which SSL Protocols and Ciphers are allowed.</p><p>For SSLProtocol, SSLv2 and SSLv3 have been proven vulnerable, so go with TLSv1, TLSv1.1, TLSv1.2 whenever possible.</p><p>The main challenge is to setup SSL Ciphers, as there is a large amount of them and some of them have been proven vulnerable, so you need to disable them, but not all ciphers.<br>There is no best settings as it depends on what environment/browser you want to support, some older environment may only have vulnerable ciphers available.</p><h1 id="Test-Tools-Websites"><a href="#Test-Tools-Websites" class="headerlink" title="Test Tools, Websites"></a>Test Tools, Websites</h1><h2 id="COMODO-SSL-Analyzer"><a href="#COMODO-SSL-Analyzer" class="headerlink" title="COMODO SSL Analyzer"></a><a href="https://sslanalyzer.comodoca.com/" target="_blank" rel="noopener">COMODO SSL Analyzer</a></h2><p>This tool will list available SSL protocols and ciphers, it also gives hint on any vulnerable protocol or weak cipher. Disable all the ciphers or protocols that marked<br>as weak/vulnerable.</p><h2 id="QUALYS-SSL-LABS-SSL-Server-Test"><a href="#QUALYS-SSL-LABS-SSL-Server-Test" class="headerlink" title="QUALYS SSL LABS - SSL Server Test"></a><a href="https://www.ssllabs.com/ssltest/index.html" target="_blank" rel="noopener">QUALYS SSL LABS - SSL Server Test</a></h2><p>This one gives more detailed result compare to the COMODO SSL Analyzer. It also gives a scaled score (scale from A to F I guess).<br>If your score is below A, it gives suggestions on how to improve.<br>This tool also do connection tests on major browsers so that you can check if all supported platform can establish connection to your website.<br>If you can get A without losing any targeted browser support, then you should be good.</p><h2 id="QUALYS-FREESCAN"><a href="#QUALYS-FREESCAN" class="headerlink" title="QUALYS FREESCAN"></a><a href="https://freescan.qualys.com/freescan-front/" target="_blank" rel="noopener">QUALYS FREESCAN</a></h2><p>(Register required)<br>This one will generate a much more detailed test report.<br>BUT be aware that you have limit number of scans for each account.<br>I registered an account and found out that it only support 10 reports by default, I do get an email instructing how to get more scan.</p><h2 id="OpenSSL-s-client"><a href="#OpenSSL-s-client" class="headerlink" title="OpenSSL s_client"></a>OpenSSL s_client</h2><blockquote><p>openssl s_client -cipher [cipher-names] -connect [host:port] (protocol flags)</p></blockquote><p>Available Protocol flags:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-ssl2         - just use SSLv2</div><div class="line">-ssl3         - just use SSLv3</div><div class="line">-tls1_2       - just use TLSv1.2</div><div class="line">-tls1_1       - just use TLSv1.1</div><div class="line">-tls1         - just use TLSv1</div><div class="line">-dtls1        - just use DTLSv1</div></pre></td></tr></table></figure></p><p>For cipher names, go to <a href="https://www.openssl.org/docs/apps/ciphers.html" target="_blank" rel="noopener">https://www.openssl.org/docs/apps/ciphers.html</a> for reference (Use short names)</p><h2 id="Bluestack-screenshot"><a href="#Bluestack-screenshot" class="headerlink" title="Bluestack screenshot"></a><a href="https://www.browserstack.com/screenshots/" target="_blank" rel="noopener">Bluestack screenshot</a></h2><p>We used this tool to check if all supported browser can establish connection to our website.</p><h1 id="Config-example"><a href="#Config-example" class="headerlink" title="Config example"></a>Config example</h1><p>The setting should be placed under corresponding VirtualHost tag httpd.conf or ssl.conf, or some other customized .conf file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SSLProtocol all -SSLv2 -SSLv3</div><div class="line">SSLHonorCipherOrder on</div><div class="line">SSLCipherSuite All:!aNULL:!eNULL:!LOW:!RC4:!MD5&quot;</div></pre></td></tr></table></figure><p>SSLProtocol should be self-explanatory.<br>For SSLCipherSuite, check syntax at <a href="http://httpd.apache.org/docs/2.4/mod/mod_ssl.html#sslciphersuite" target="_blank" rel="noopener">http://httpd.apache.org/docs/2.4/mod/mod_ssl.html#sslciphersuite</a>,<br>check available suites at <a href="https://www.openssl.org/docs/apps/ciphers.html" target="_blank" rel="noopener">https://www.openssl.org/docs/apps/ciphers.html</a>.</p><p>We can also do a whitelist approach like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SSLCipherSuite HIGH:MEDEUM:!LOW</div></pre></td></tr></table></figure></p><p>Here is a guideline you can follow:<br><a href="http://httpd.apache.org/docs/trunk/ssl/ssl_howto.html" target="_blank" rel="noopener">SSL/TLS Strong Encryption: How-To</a></p><h1 id="Common-issues"><a href="#Common-issues" class="headerlink" title="Common issues"></a>Common issues</h1><h2 id="Config-does-not-get-reflected-even-after-httpd-restart"><a href="#Config-does-not-get-reflected-even-after-httpd-restart" class="headerlink" title="Config does not get reflected even after httpd restart"></a>Config does not get reflected even after httpd restart</h2><p>This means that there are other VirtualHost tag or other config file overrided your configuration, you need to find it out.</p><h2 id="Forward-secrecy-not-enabled"><a href="#Forward-secrecy-not-enabled" class="headerlink" title="Forward secrecy not enabled"></a>Forward secrecy not enabled</h2><p>Add this line to apache config:</p><blockquote><p>SSLHonorCipherOrder on</p></blockquote><h2 id="Anonymous-cipher-suites-are-not-disabled"><a href="#Anonymous-cipher-suites-are-not-disabled" class="headerlink" title="Anonymous cipher suites are not disabled"></a>Anonymous cipher suites are not disabled</h2><p>Add !aNULL to SSLCipherSuite </p><h1 id="Other-Reference"><a href="#Other-Reference" class="headerlink" title="Other Reference"></a>Other Reference</h1><p><a href="https://drjohnstechtalk.com/blog/2011/09/the-basics-of-how-to-work-with-ciphers/" target="_blank" rel="noopener">The Basics of How to Work with Cipher Settings - Dr John’s Tech Talk</a><br><a href="http://swissec.blogspot.com/2013/12/ssl-and-penetration-test.html" target="_blank" rel="noopener">SSL and Penetration Test</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;My company’s client is going to do penetration test on our product, I was assigned to configure Apache server, mainly enhance SSL Cipher 
      
    
    </summary>
    
    
      <category term="Apache" scheme="https://fsworld009.github.io/blog/tags/Apache/"/>
    
      <category term="server" scheme="https://fsworld009.github.io/blog/tags/server/"/>
    
      <category term="ssl" scheme="https://fsworld009.github.io/blog/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="https://fsworld009.github.io/blog/2015/07/08/hexo/"/>
    <id>https://fsworld009.github.io/blog/2015/07/08/hexo/</id>
    <published>2015-07-08T11:30:26.000Z</published>
    <updated>2020-06-25T16:02:47.954Z</updated>
    
    <content type="html"><![CDATA[<p>Quick note on my thought with Hexo.</p><p>Pros:</p><ul><li><strong>Static website (except comments)</strong> : I can just publish my blog by using github pages, or any free web hosting service</li><li><strong>Use GitHub flavored Markdown</strong> : I think markdown is good for blogging, especially that you can just surround all code snippets with ``` symbol without converting anything.</li><li><strong>Easy to include image</strong> : Each post can have a folder to include all assets, and then use Hexo tags to include them in the post.</li><li><strong>Extensible</strong> : Various plugins are available for Hexo.</li></ul><p>Cons:</p><ul><li><strong>No way to customize color scheme in themes</strong> : I’ve checked many Hexo themes and none of them provide options to adjust colors in _config.yml, looks like this is not encouraged.</li><li><strong>No easy way to unpublish articles</strong> : there is a publish command, but not unpublish. Right now I need to manually move artivles back to _draft folder to unpublish it.</li></ul><p>More updates in future.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Quick note on my thought with Hexo.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Static website (except comments)&lt;/strong&gt; : I can just publish my b
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://fsworld009.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Re-Re-Restart</title>
    <link href="https://fsworld009.github.io/blog/2015/07/08/re-re-restart/"/>
    <id>https://fsworld009.github.io/blog/2015/07/08/re-re-restart/</id>
    <published>2015-07-08T09:39:42.000Z</published>
    <updated>2020-06-25T16:02:48.025Z</updated>
    
    <content type="html"><![CDATA[<p>  So, <a href="http://logdown.com/" target="_blank" rel="noopener">Logdown</a> is apparently not in active development anymore, which means I need to move again.</p><p>  I searched for alternatives for a while, one thing I want to have is the easiness of pasting codes.<br>Most blog services, such as Google blogger, doesn’t support pasting codes. You either need to convert your code to HTML escaped string or find some scripts to help you. Unfortunately I cannot find any service that makes this task easier.</p><p>  Then I found <a href="http://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a>, and <a href="http://ruhoh.com/" target="_blank" rel="noopener">Ruhoh</a>. They are “Static site generator”, which means you can configure and make posts on local side, then use these generators<br>to generate a static html/css/js site. I like this idea, because this approach gives me more control on my blog, and I don’t need any web hosting service, GitHub pages will be enough.</p><p>After a little bit research on static site generators, I found <a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a> and I decided to give Hexo a try. It supports GitHub markdown, which I think will solve my concern on pasting codes.</p><p>So after 2 days try and error, here is my new blog, hopefully I won’t abandon it too quick this time. </p><p>Goal of this blog:</p><ul><li>Share my knowledge in programming or general computer stuffs.</li><li>Served as a note/reference site for myself, in case I forgot something. </li><li>Practice English writing</li></ul><p>Yes, my English sucks. So be prepared for a lot of grammar and spelling errors in this blog.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  So, &lt;a href=&quot;http://logdown.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Logdown&lt;/a&gt; is apparently not in active development anymore, which mea
      
    
    </summary>
    
    
      <category term="blog" scheme="https://fsworld009.github.io/blog/tags/blog/"/>
    
  </entry>
  
</feed>
